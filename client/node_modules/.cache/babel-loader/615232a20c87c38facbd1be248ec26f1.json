{"ast":null,"code":"import axios from 'axios';\nexport default class Api {\n  constructor(req) {\n    this.api = void 0;\n    this.req = void 0;\n\n    this.search = async () => {\n      const {\n        title\n      } = this.req;\n      const res = await this.api.get('/search', {\n        params: {\n          title\n        }\n      });\n\n      if (res) {\n        const {\n          data\n        } = res;\n        return data;\n      } else {\n        return res;\n      }\n    };\n\n    this.login = async () => {\n      const res = await this.api.post('/login', this.req);\n\n      if (res) {\n        const {\n          data\n        } = res;\n        return data;\n      } else {\n        return res;\n      }\n    };\n\n    this.tokenValidator = async token => {\n      const user = await this.api.get('/user', {\n        headers: {\n          \"Authorization\": `Bearer ${token}`\n        }\n      });\n\n      if (user) {\n        const {\n          data\n        } = user;\n        return data;\n      } else {\n        return user;\n      }\n    };\n\n    this.register = async () => {\n      const res = await this.api.post('/signup', this.req);\n\n      if (res) {\n        const {\n          data\n        } = res;\n        return data;\n      } else {\n        return res;\n      }\n    };\n\n    this.myBlogs = async () => {\n      const {\n        uuid,\n        currentPage,\n        take\n      } = this.req;\n      const res = await this.api.get('/myblogs', {\n        params: {\n          uuid,\n          currentPage,\n          take\n        }\n      });\n\n      if (res) {\n        const {\n          data\n        } = res;\n        return data;\n      }\n    };\n\n    this.editPost = async () => {\n      const res = await this.api.post('/myblogs/update', this.req);\n\n      if (res) {\n        const {\n          data\n        } = res;\n        return data;\n      }\n    };\n\n    this.addPost = async () => {\n      const res = await this.api.post('/add', this.req);\n\n      if (res) {\n        const {\n          data\n        } = res;\n        return data;\n      }\n    };\n\n    this.deletePost = async () => {\n      const res = await this.api.put('/delete', this.req);\n\n      if (res) {\n        const {\n          data\n        } = res;\n        return data;\n      }\n    };\n\n    this.index = async () => {\n      // console.log(data)\n      const res = await this.api.get('/index', {\n        params: this.req\n      });\n\n      if (res) {\n        const {\n          data\n        } = res;\n        return data;\n      }\n    };\n\n    this.addComment = async () => {\n      const res = await this.api.post('/user/comment', this.req);\n\n      if (res) {\n        const {\n          data\n        } = res;\n        return data;\n      } else {\n        return res;\n      }\n    };\n\n    this.req = req;\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_BASE_URL,\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/api/Api.ts"],"names":["axios","Api","constructor","req","api","search","title","res","get","params","data","login","post","tokenValidator","token","user","headers","register","myBlogs","uuid","currentPage","take","editPost","addPost","deletePost","put","index","addComment","create","baseURL","process","env","REACT_APP_BASE_URL"],"mappings":"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","sourcesContent":["import axios from 'axios'\n\nexport default class Api {\n\n    api: any\n    req: any\n\n    constructor(req: any) {\n        this.req = req\n        this.api = axios.create({\n            baseURL: process.env.REACT_APP_BASE_URL,\n            headers: {\n                \"Content-type\": \"application/json\"\n            }\n        })\n    }\n\n    search = async (): Promise<void> => {\n        const { title } = this.req\n        const res: any = await this.api.get('/search', { params: { title } })\n        if (res) {\n            const { data } = res\n            return data\n        } else {\n            return res\n        }\n    }\n\n    login = async (): Promise<void> => {\n        const res: any = await this.api.post('/login', this.req)\n        if (res) {\n            const { data } = res\n            return data\n        } else {\n            return res\n        }\n    }\n\n    tokenValidator = async (token: any) => {\n\n        const user: any = await this.api.get('/user', { headers: { \"Authorization\": `Bearer ${token}` } })\n        if (user) {\n            const { data } = user\n            return data\n        } else {\n            return user\n        }\n    }\n\n\n    register = async (): Promise<void> => {\n        const res: any = await this.api.post('/signup', this.req)\n        if (res) {\n            const { data } = res\n            return data\n        } else {\n            return res\n        }\n    }\n\n    myBlogs = async (): Promise<void> => {\n        const { uuid, currentPage, take } = this.req\n        const res: any = await this.api.get('/myblogs', { params: { uuid, currentPage, take } })\n        if (res) {\n            const { data } = res\n            return data\n        }\n    }\n\n    editPost = async (): Promise<void> => {\n        const res: any = await this.api.post('/myblogs/update', this.req)\n        if (res) {\n            const { data } = res\n            return data\n        }\n    }\n\n    addPost = async (): Promise<void> => {\n        const res: any = await this.api.post('/add', this.req)\n        if (res) {\n            const { data } = res\n            return data\n        }\n    }\n\n    deletePost = async (): Promise<void> => {\n\n        const res: any = await this.api.put('/delete', this.req)\n        if (res) {\n            const { data } = res\n            return data\n        }\n    }\n\n    index = async (): Promise<void> => {\n        // console.log(data)\n        const res: any = await this.api.get('/index', { params: this.req })\n        if (res) {\n            const { data } = res\n            return data\n        }\n    }\n\n    addComment = async (): Promise<void> => {\n        const res: any = await this.api.post('/user/comment', this.req)\n        if (res) {\n            const { data } = res\n            return data\n        } else {\n            return res\n        }\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}