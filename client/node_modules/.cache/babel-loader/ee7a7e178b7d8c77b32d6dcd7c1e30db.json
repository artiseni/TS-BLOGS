{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-16/client/src/pages/Index.tsx\";\nimport { Component } from 'react';\nimport Navigation from '../components/Navigation';\nimport { connect } from 'react-redux';\nimport Api from '../api/Api';\nimport { setLoading, setCountBlogs } from '../store/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Index extends Component {\n  constructor(props) {\n    super(props);\n    this.setLoading = void 0;\n    this.setCountBlogs = void 0;\n\n    this.componentDidMount = () => {\n      console.log(`Mounted`); // this.nextPage()\n    };\n\n    this.shouldComponentUpdate = () => {\n      // console.log(`Should be updated? --> ${this.data}`)\n      return true;\n    };\n\n    this.componentDidUpdate = () => {\n      console.log(`Updated`);\n    };\n\n    this.componentWillUnmount = () => {\n      console.log(`Will unmount`);\n    };\n\n    this.updatePage = async () => {\n      try {\n        const api = new Api(this.props.page.blogs);\n        const data = await api.index();\n        console.log(data);\n        this.setCountBlogs(data[1]);\n      } catch (error) {\n        console.log(`${error}`);\n      } // this.setState({ data, loading: true })\n      // const count = Math.ceil(this.state.data[1] / this.state.params.take)\n      // this.setState({ countData: count })\n\n    };\n\n    this.nextPage = async () => {// this.setState({\n      //     params: {\n      //         currentPage: this.state.params.currentPage + 1,\n      //         take: 4\n      //     }\n      // })\n      // const api = new Api(this.state.params)\n      // const data = await api.index()\n      // this.setState({ data, loading: true })\n      // const count = Math.ceil(this.state.data[1] / this.state.params.take)\n      // this.setState({ countData: count })\n    };\n\n    this.previousPage = async () => {// this.setState({\n      //     params: {\n      //         currentPage: this.state.params.currentPage - 1,\n      //         take: 4\n      //     }\n      // })\n      // const api = new Api(this.state.params)\n      // const data = await api.index()\n      // this.setState({ data, loading: true })\n    };\n\n    this.targetPage = async num => {// this.setState({\n      //     params: {\n      //         currentPage: num,\n      //         take: 4\n      //     }\n      // })\n      // const api = new Api(this.state.params)\n      // const data = await api.index()\n      // this.setState({ data, loading: true })\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true);\n    };\n\n    const {\n      page,\n      setLoading,\n      setCountBlogs\n    } = this.props;\n    this.setLoading = setLoading;\n    this.setCountBlogs = setCountBlogs;\n    console.log(page);\n    console.log(this.props);\n    this.updatePage();\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  page: state.page\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setLoading: () => dispatch(setLoading()),\n    setCountBlogs: num => dispatch(setCountBlogs(num))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/pages/Index.tsx"],"names":["Component","Navigation","connect","Api","setLoading","setCountBlogs","Index","constructor","props","componentDidMount","console","log","shouldComponentUpdate","componentDidUpdate","componentWillUnmount","updatePage","api","page","blogs","data","index","error","nextPage","previousPage","targetPage","num","render","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport Navigation from '../components/Navigation'\nimport { connect } from 'react-redux'\nimport { Container, Row, Col, Card, Alert } from 'react-bootstrap'\nimport HiddenButton from '../components/HiddenButton'\nimport Api from '../api/Api'\nimport Pagination from '../components/Pagin'\nimport { setLoading, setCountBlogs } from '../store/hooks'\n\n\ninterface Props {\n    page: {\n        blogs: {\n            currentPage: number\n            skip: number\n        }\n    }\n\n    setLoading: any\n    setCountBlogs: any\n}\n\n\nclass Index extends Component<Props>{\n\n\n    setLoading: any\n    setCountBlogs: any\n\n    constructor(props: any) {\n        super(props)\n        const { page, setLoading, setCountBlogs }: any = this.props\n\n        this.setLoading = setLoading\n        this.setCountBlogs = setCountBlogs\n\n        console.log(page)\n        console.log(this.props)\n\n        this.updatePage()\n    }\n\n    componentDidMount = () => {\n        console.log(`Mounted`)\n        // this.nextPage()\n    }\n\n    shouldComponentUpdate = (): boolean => {\n        // console.log(`Should be updated? --> ${this.data}`)\n        return true\n    }\n\n    componentDidUpdate = (): void => {\n        console.log(`Updated`)\n    }\n\n    componentWillUnmount = () => {\n        console.log(`Will unmount`)\n    }\n\n    updatePage = async (): Promise<void> => {\n\n        try {\n            const api = new Api(this.props.page.blogs)\n            const data: any = await api.index()\n            console.log(data)\n            this.setCountBlogs(data[1])\n        } catch (error) {\n            console.log(`${error}`)\n        }\n        // this.setState({ data, loading: true })\n        // const count = Math.ceil(this.state.data[1] / this.state.params.take)\n        // this.setState({ countData: count })\n    }\n\n    nextPage = async () => {\n        // this.setState({\n        //     params: {\n        //         currentPage: this.state.params.currentPage + 1,\n        //         take: 4\n        //     }\n        // })\n        // const api = new Api(this.state.params)\n        // const data = await api.index()\n        // this.setState({ data, loading: true })\n\n        // const count = Math.ceil(this.state.data[1] / this.state.params.take)\n        // this.setState({ countData: count })\n    }\n\n    previousPage = async () => {\n\n        // this.setState({\n        //     params: {\n        //         currentPage: this.state.params.currentPage - 1,\n        //         take: 4\n        //     }\n        // })\n\n        // const api = new Api(this.state.params)\n        // const data = await api.index()\n        // this.setState({ data, loading: true })\n    }\n\n    targetPage = async (num: number) => {\n\n        // this.setState({\n        //     params: {\n        //         currentPage: num,\n        //         take: 4\n        //     }\n        // })\n\n        // const api = new Api(this.state.params)\n        // const data = await api.index()\n        // this.setState({ data, loading: true })\n\n    }\n\n    render = (): JSX.Element => {\n\n\n        return (\n            <>\n                <Navigation />\n                <div className=\"App\">\n                    {/* <Container>\n                        <Row>\n                            <Col md>\n                                {this.state.loading ?\n                                    this.state.data[0].map((result: any) =>\n                                        <div className='App blogs' key={result.uuid}>\n                                            <Card>\n                                                <Card.Body>\n                                                    <Card.Text>\n                                                        By : {result.infouser.username}\n                                                    </Card.Text>\n                                                    <Card.Text>\n                                                        Last update : {result.updatedAt}\n                                                    </Card.Text>\n                                                    <Card.Title>\n                                                        {result.title}\n                                                    </Card.Title>\n                                                    <hr />\n                                                    <Card.Text className=\"content\">\n                                                        {this.hidden.textBody(result.content)}\n                                                    </Card.Text>\n                                                </Card.Body>\n                                                <HiddenButton text={result.content} />\n                                            </Card>\n                                            <br />\n                                        </div>\n                                    ) : <Alert variant=\"success\">Processing data... </Alert>\n                                }\n                            </Col>\n                        </Row>\n                    </Container> */}\n                    {/* <Pagination\n                        count={this.state.countData}\n                        nextPage={this.nextPage}\n                        previousPage={this.previousPage}\n                        targetPage={this.targetPage}\n                    /> */}\n                </div>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state: any) => ({\n    page: state.page\n})\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setLoading: () => dispatch(setLoading()),\n        setCountBlogs: (num: number) => dispatch(setCountBlogs(num))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Index)"]},"metadata":{},"sourceType":"module"}