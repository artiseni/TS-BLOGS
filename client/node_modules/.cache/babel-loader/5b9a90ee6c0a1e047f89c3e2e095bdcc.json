{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-16/client/src/components/HiddenButton.tsx\";\nimport { Component } from \"react\";\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst slicer = text => {\n  const slicer = text.slice(0, 200);\n  return `${slicer}...`;\n};\n\nclass HiddenButton extends Component {\n  constructor(props) {\n    super(props);\n    this.id = 0;\n\n    this.readMore = () => {\n      console.log(this.state.textBody);\n    };\n\n    this.isDisplay = () => {\n      const {\n        text\n      } = this.props;\n      const words = text.match(/(\\w+)/g).length;\n      return words >= 100 ? /*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.readMore,\n        id: `${this.id + 1}`,\n        children: \"Read more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 107\n      }, this);\n    };\n\n    this.textBody = text => {\n      const words = text.match(/(\\w+)/g).length;\n\n      if (words >= 100) {\n        console.log(words);\n      }\n\n      return words <= 100 ? text : slicer(text);\n    };\n\n    this.render = () => {\n      return this.isDisplay();\n    };\n\n    this.state = {\n      textBody: this.props.text,\n      id: 0\n    };\n  }\n\n}\n\nexport default HiddenButton;","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/components/HiddenButton.tsx"],"names":["Component","Button","slicer","text","slice","HiddenButton","constructor","props","id","readMore","console","log","state","textBody","isDisplay","words","match","length","render"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,QAAuB,iBAAvB;;;AAGA,MAAMC,MAAM,GAAIC,IAAD,IAAkB;AAC7B,QAAMD,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAW,CAAX,EAAc,GAAd,CAAf;AACA,SAAQ,GAAEF,MAAO,KAAjB;AACH,CAHD;;AAcA,MAAMG,YAAN,SAA2BL,SAA3B,CAAmD;AAI/CM,EAAAA,WAAW,CAACC,KAAD,EAAe;AACtB,UAAMA,KAAN;AADsB,SAF1BC,EAE0B,GAFb,CAEa;;AAAA,SAS1BC,QAT0B,GASf,MAAM;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,QAAvB;AACH,KAXyB;;AAAA,SAa1BC,SAb0B,GAad,MAAM;AACd,YAAM;AAAEX,QAAAA;AAAF,UAAgB,KAAKI,KAA3B;AACA,YAAMQ,KAAK,GAAGZ,IAAI,CAACa,KAAL,CAAW,QAAX,EAAqBC,MAAnC;AACA,aAAOF,KAAK,IAAI,GAAT,gBAAe,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKN,QAAtB;AAAgC,QAAA,EAAE,EAAG,GAAE,KAAKD,EAAL,GAAU,CAAE,EAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAf,gBAA2F;AAAA;AAAA;AAAA;AAAA,cAAlG;AACH,KAjByB;;AAAA,SAmB1BK,QAnB0B,GAmBdV,IAAD,IAAe;AAEtB,YAAMY,KAAK,GAAGZ,IAAI,CAACa,KAAL,CAAW,QAAX,EAAqBC,MAAnC;;AACA,UAAIF,KAAK,IAAI,GAAb,EAAkB;AACdL,QAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACH;;AACD,aAAOA,KAAK,IAAI,GAAT,GAAeZ,IAAf,GAAsBD,MAAM,CAACC,IAAD,CAAnC;AACH,KA1ByB;;AAAA,SA4B1Be,MA5B0B,GA4BjB,MAAM;AACX,aAAO,KAAKJ,SAAL,EAAP;AACH,KA9ByB;;AAEtB,SAAKF,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWJ,IADZ;AAETK,MAAAA,EAAE,EAAE;AAFK,KAAb;AAIH;;AAV8C;;AAqCnD,eAAeH,YAAf","sourcesContent":["import { Component } from \"react\"\nimport { Button } from 'react-bootstrap'\n\n\nconst slicer = (text: string) => {\n    const slicer = text.slice(0, 200)\n    return `${slicer}...`\n}\n\ninterface Props {\n    text: string\n}\n\ninterface State {\n    textBody: string\n    id: number\n}\n\nclass HiddenButton extends Component<Props, State> {\n\n    id: number = 0\n\n    constructor(props: Props) {\n        super(props)\n        this.state = {\n            textBody: this.props.text,\n            id: 0\n        }\n    }\n\n\n    readMore = () => {\n        console.log(this.state.textBody)\n    }\n\n    isDisplay = () => {\n        const { text }: any = this.props\n        const words = text.match(/(\\w+)/g).length\n        return words >= 100 ? <Button onClick={this.readMore} id={`${this.id + 1}`} >Read more</Button> : <p></p>\n    }\n\n    textBody = (text: any) => {\n\n        const words = text.match(/(\\w+)/g).length\n        if (words >= 100) {\n            console.log(words)\n        }\n        return words <= 100 ? text : slicer(text)\n    }\n\n    render = () => {\n        return this.isDisplay()\n    }\n}\n\nexport default HiddenButton"]},"metadata":{},"sourceType":"module"}