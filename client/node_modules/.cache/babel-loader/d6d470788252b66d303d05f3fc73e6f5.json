{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-16/client/src/pages/Myblogs.tsx\";\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Container, Row, Col, Card, Alert, Button } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\nimport Navigation from '../components/Navigation';\nimport { setMyPost, setLoading } from '../store/hooks';\nimport HiddenButton from '../components/HiddenButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Myblogs extends Component {\n  constructor(...args) {\n    super(...args);\n    this.myPost = this.props.data.myPost;\n    this.user = this.props.data.user;\n    this.data = void 0;\n\n    this.componentDidMount = async () => {\n      const {\n        blogs\n      } = this.props.data;\n      const {\n        uuid\n      } = this.props.data.user;\n      const {\n        currentPage,\n        take\n      } = blogs;\n      const data = {\n        uuid,\n        currentPage,\n        take\n      };\n\n      try {\n        const promise = new Promise(res => {\n          return res(data);\n        });\n        const waiting = await promise;\n\n        if (waiting) {\n          console.log(waiting); // const api = new Api(waiting)\n          // const result: any = await api.myBlogs()\n          // if (result) {\n          //     this.props.setLoading()\n          //     this.props.setMyPost(result)\n          // }\n        }\n      } catch (error) {\n        const {\n          data\n        } = error.response;\n        alert(data.message);\n      }\n    };\n\n    this.btnEdit = uuid => {\n      console.log(uuid);\n    };\n\n    this.render = () => {\n      const hidden = new HiddenButton({});\n      const {\n        loading\n      } = this.props.page;\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: /*#__PURE__*/_jsxDEV(Container, {\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                md: true,\n                children: loading ? this.myPost[0].map(result => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"App blogs\",\n                  children: [/*#__PURE__*/_jsxDEV(Card, {\n                    children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n                      children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n                        children: [\"By : \", result.infouser.username]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 80,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                        children: [\"Last update : \", result.updatedAt]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 83,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(Card.Title, {\n                        children: result.title\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 86,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 89,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                        className: \"content\",\n                        children: hidden.textBody(result.content)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 90,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(Button, {\n                        variant: \"dark\",\n                        onClick: () => this.btnEdit(result.uuid),\n                        children: \"Edit\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 93,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 79,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(HiddenButton, {\n                      text: result.content\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 95,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 78,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 45\n                  }, this)]\n                }, result.uuid, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 41\n                }, this)) : /*#__PURE__*/_jsxDEV(Alert, {\n                  variant: \"success\",\n                  children: \"Processing data... \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true);\n    };\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  data: state.data,\n  page: state.page\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setMyPost: data => dispatch(setMyPost(data)),\n  setLoading: () => dispatch(setLoading())\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Myblogs));","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/pages/Myblogs.tsx"],"names":["Component","connect","Container","Row","Col","Card","Alert","Button","withRouter","Navigation","setMyPost","setLoading","HiddenButton","Myblogs","myPost","props","data","user","componentDidMount","blogs","uuid","currentPage","take","promise","Promise","res","waiting","console","log","error","response","alert","message","btnEdit","render","hidden","loading","page","map","result","infouser","username","updatedAt","title","textBody","content","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { Container, Row, Col, Card, Alert, Button } from 'react-bootstrap'\nimport { withRouter } from 'react-router-dom'\nimport Navigation from '../components/Navigation'\nimport { setMyPost, setLoading } from '../store/hooks'\nimport HiddenButton from '../components/HiddenButton'\nimport Api from '../api/Api'\n\n\ninterface Props {\n    data: {\n        user: any\n        myPost: any\n    }\n    page: {\n        loading: boolean\n    }\n    setMypost: any\n    setLoading: any\n}\n\n\nclass Myblogs extends Component<Props | any> {\n\n    myPost: any = this.props.data.myPost\n    user: any = this.props.data.user\n    data: any\n\n    componentDidMount = async () => {\n\n        const { blogs } = this.props.data\n        const { uuid } = this.props.data.user\n        const { currentPage, take } = blogs\n        const data = { uuid, currentPage, take }\n\n        try {\n            const promise = new Promise(res => {\n                return res(data)\n            })\n            const waiting = await promise\n\n            if (waiting) {\n                console.log(waiting)\n                // const api = new Api(waiting)\n                // const result: any = await api.myBlogs()\n                // if (result) {\n                //     this.props.setLoading()\n                //     this.props.setMyPost(result)\n                // }\n            }\n\n        } catch (error) {\n            const { data } = error.response\n            alert(data.message)\n        }\n    }\n\n    btnEdit = (uuid: string) => {\n        console.log(uuid)\n    }\n\n    render = () => {\n\n        const hidden = new HiddenButton({})\n        const { loading } = this.props.page\n\n        return (\n            <>\n                <Navigation />\n                <div className=\"App\">\n                    <Container>\n                        <Row>\n                            <Col md>\n                                {loading ?\n                                    this.myPost[0].map((result: any) =>\n                                        <div className='App blogs' key={result.uuid}>\n                                            <Card>\n                                                <Card.Body>\n                                                    <Card.Text>\n                                                        By : {result.infouser.username}\n                                                    </Card.Text>\n                                                    <Card.Text>\n                                                        Last update : {result.updatedAt}\n                                                    </Card.Text>\n                                                    <Card.Title>\n                                                        {result.title}\n                                                    </Card.Title>\n                                                    <hr />\n                                                    <Card.Text className=\"content\">\n                                                        {hidden.textBody(result.content)}\n                                                    </Card.Text>\n                                                    <Button variant=\"dark\" onClick={() => this.btnEdit(result.uuid)} >Edit</Button>\n                                                </Card.Body>\n                                                <HiddenButton text={result.content} />\n                                            </Card>\n                                            <br />\n                                        </div>\n                                    ) : <Alert variant=\"success\">Processing data... </Alert>\n                                }\n                            </Col>\n                        </Row>\n                    </Container>\n                </div>\n            </>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state: any) => ({\n    data: state.data,\n    page: state.page\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    setMyPost: (data: any) => dispatch(setMyPost(data)),\n    setLoading: () => dispatch(setLoading())\n})\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Myblogs))\n"]},"metadata":{},"sourceType":"module"}