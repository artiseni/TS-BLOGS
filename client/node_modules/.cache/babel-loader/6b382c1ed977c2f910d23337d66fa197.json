{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-16/client/src/components/HiddenButton.tsx\";\nimport { Component } from \"react\";\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst slicer = text => {\n  const slicer = text.slice(0, 200);\n  return `${slicer}...`;\n};\n\nexport const textBody = text => {\n  const words = text.match(/(\\w+)/g).length;\n\n  if (words >= 100) {// console.log(words)\n  }\n\n  return words <= 100 ? text : slicer(text);\n};\n\nclass HiddenButton extends Component {\n  constructor(props) {\n    super(props);\n\n    this.readMore = () => {\n      console.log(this.state.textBody);\n    };\n\n    this.isDisplay = () => {\n      this.setState({\n        id: this.state.id + 1\n      });\n      const {\n        text\n      } = this.props;\n      const words = text.match(/(\\w+)/g).length;\n      return words >= 100 ? /*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.readMore,\n        id: `${this.state.id}`,\n        children: \"Read more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 109\n      }, this);\n    };\n\n    this.render = () => {\n      return this.isDisplay();\n    };\n\n    this.state = {\n      textBody: this.props.text,\n      id: 1\n    };\n  }\n\n}\n\nexport default HiddenButton;","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/components/HiddenButton.tsx"],"names":["Component","Button","slicer","text","slice","textBody","words","match","length","HiddenButton","constructor","props","readMore","console","log","state","isDisplay","setState","id","render"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,QAAuB,iBAAvB;;;AAGA,MAAMC,MAAM,GAAIC,IAAD,IAAkB;AAC7B,QAAMD,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAW,CAAX,EAAc,GAAd,CAAf;AACA,SAAQ,GAAEF,MAAO,KAAjB;AACH,CAHD;;AAKA,OAAO,MAAMG,QAAQ,GAAIF,IAAD,IAAe;AAEnC,QAAMG,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,QAAX,EAAqBC,MAAnC;;AACA,MAAIF,KAAK,IAAI,GAAb,EAAkB,CACd;AACH;;AACD,SAAOA,KAAK,IAAI,GAAT,GAAeH,IAAf,GAAsBD,MAAM,CAACC,IAAD,CAAnC;AACH,CAPM;;AAmBP,MAAMM,YAAN,SAA2BT,SAA3B,CAAmD;AAG/CU,EAAAA,WAAW,CAACC,KAAD,EAAe;AACtB,UAAMA,KAAN;;AADsB,SAS1BC,QAT0B,GASf,MAAM;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWV,QAAvB;AACH,KAXyB;;AAAA,SAa1BW,SAb0B,GAad,MAAM;AACd,WAAKC,QAAL,CAAc;AAAEC,QAAAA,EAAE,EAAE,KAAKH,KAAL,CAAWG,EAAX,GAAgB;AAAtB,OAAd;AACA,YAAM;AAAEf,QAAAA;AAAF,UAAgB,KAAKQ,KAA3B;AACA,YAAML,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAW,QAAX,EAAqBC,MAAnC;AACA,aAAOF,KAAK,IAAI,GAAT,gBAAe,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKM,QAAtB;AAAgC,QAAA,EAAE,EAAG,GAAE,KAAKG,KAAL,CAAWG,EAAG,EAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAf,gBAA6F;AAAA;AAAA;AAAA;AAAA,cAApG;AACH,KAlByB;;AAAA,SAoB1BC,MApB0B,GAoBjB,MAAM;AACX,aAAO,KAAKH,SAAL,EAAP;AACH,KAtByB;;AAEtB,SAAKD,KAAL,GAAa;AACTV,MAAAA,QAAQ,EAAE,KAAKM,KAAL,CAAWR,IADZ;AAETe,MAAAA,EAAE,EAAE;AAFK,KAAb;AAIH;;AAT8C;;AA4BnD,eAAeT,YAAf","sourcesContent":["import { Component } from \"react\"\nimport { Button } from 'react-bootstrap'\n\n\nconst slicer = (text: string) => {\n    const slicer = text.slice(0, 200)\n    return `${slicer}...`\n}\n\nexport const textBody = (text: any) => {\n\n    const words = text.match(/(\\w+)/g).length\n    if (words >= 100) {\n        // console.log(words)\n    }\n    return words <= 100 ? text : slicer(text)\n}\n\n\ninterface Props {\n    text: string\n}\n\ninterface State {\n    textBody: string\n    id: number\n}\n\nclass HiddenButton extends Component<Props, State> {\n\n\n    constructor(props: Props) {\n        super(props)\n        this.state = {\n            textBody: this.props.text,\n            id: 1\n        }\n    }\n\n\n    readMore = () => {\n        console.log(this.state.textBody)\n    }\n\n    isDisplay = () => {\n        this.setState({ id: this.state.id + 1 })\n        const { text }: any = this.props\n        const words = text.match(/(\\w+)/g).length\n        return words >= 100 ? <Button onClick={this.readMore} id={`${this.state.id}`} >Read more</Button> : <p></p>\n    }\n\n    render = () => {\n        return this.isDisplay()\n    }\n}\n\nexport default HiddenButton"]},"metadata":{},"sourceType":"module"}