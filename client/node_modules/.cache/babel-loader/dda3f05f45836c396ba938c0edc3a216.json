{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-04/client/src/pages/Index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setIndexPost\n/* setContent */\n} from '../store/data';\nimport { Container, Row, Col, Card, Alert\n/* Button */\n} from 'react-bootstrap';\nimport Navigation from '../components/Navigation';\nimport Pagination from '../components/Pagination';\nimport { contentData, fullContentReader } from '../Functions/functions';\nimport Api from '../api/Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Index = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(false);\n  const {\n    index_post\n    /* content*/\n\n  } = useSelector(state => state.data);\n  const {\n    page\n  } = useSelector(state => state.page);\n  const {\n    skip,\n    take\n  } = page;\n  const countPosts = index_post[1];\n  const count = Math.ceil(countPosts / page.take);\n  useEffect(() => {\n    const fetch = async () => {\n      setLoading(true);\n      const api = new Api({});\n      const data = await api.index({\n        skip,\n        take\n      });\n      dispatch(setIndexPost(data));\n    };\n\n    fetch();\n  }, [dispatch, setLoading, skip, take]); // Read More button\n  // const content_text: any = []\n  // let getNumber = 0\n  // const contentData = (text: any) => { // --> ini\n  //     const words = text.match(/(\\w+)/g).length\n  //     if (words >= 100) {\n  //         content_text.push(text)\n  //     }\n  //     return words <= 100 ? text : slicer(text)\n  // }\n  // const fullContentReader: any = (text: any) => { // --> ini\n  //     const words = text.match(/(\\w+)/g).length\n  //     getNumber++\n  //     return words > 100 ? <Button variant=\"dark\" className=\"thisButton\" id={`${getNumber}`} onClick={displayfull}>Read More</Button> : null\n  // }\n  // const slicer = (text: string) => {\n  //     const slicer = text.slice(0, 200)\n  //     return slicer\n  // }\n  // const displayfull = (e: any) => {\n  //     let { textContent, id } = e.target\n  //     const data_id: any = document.getElementById(id)\n  //     const { parentNode } = data_id\n  //     const parentDiv = parentNode.childNodes[0]\n  //     const text_content = parentDiv.childNodes[4]\n  //     const index = parseInt(id) - 1\n  //     dispatch(setContent(content_text))\n  //     // console.log(index)\n  //     if (textContent === 'Read More') {\n  //         text_content.innerHTML = content[index]\n  //         data_id.innerHTML = 'Show less'\n  //     } else {\n  //         text_content.innerHTML = slicer(content[index])\n  //         data_id.innerHTML = 'Read More'\n  //     }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            md: true,\n            children: loading ? index_post[0].map(result => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"App blogs\",\n              children: [/*#__PURE__*/_jsxDEV(Card, {\n                children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n                  children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n                    children: [\"By : \", result.infouser.username]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                    children: [\"Last update : \", result.updatedAt]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 94,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(Card.Title, {\n                    children: result.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 97,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 100,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                    className: \"content\",\n                    children: contentData(result.content)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 101,\n                    columnNumber: 49\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 45\n                }, this), fullContentReader(result.content)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 41\n              }, this)]\n            }, result.uuid, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 37\n            }, this)) : /*#__PURE__*/_jsxDEV(Alert, {\n              variant: \"success\",\n              children: \"Data sedang diproses... \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      count: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Index, \"X58ZKMGpwcq/qzGokbYfTCA9BgI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Index;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-04/client/src/pages/Index.tsx"],"names":["useEffect","useState","useDispatch","useSelector","setIndexPost","Container","Row","Col","Card","Alert","Navigation","Pagination","contentData","fullContentReader","Api","Index","dispatch","loading","setLoading","index_post","state","data","page","skip","take","countPosts","count","Math","ceil","fetch","api","index","map","result","infouser","username","updatedAt","title","content","uuid"],"mappings":"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","sourcesContent":["import { FC, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { setIndexPost /* setContent */ } from '../store/data'\nimport { Container, Row, Col, Card, Alert /* Button */ } from 'react-bootstrap'\nimport Navigation from '../components/Navigation'\nimport Pagination from '../components/Pagination'\nimport { contentData, fullContentReader } from '../Functions/functions'\nimport Api from '../api/Api'\n\n\nconst Index: FC = () => {\n\n    const dispatch = useDispatch()\n    const [loading, setLoading] = useState<boolean>(false)\n    const { index_post /* content*/ }: any = useSelector((state: any) => state.data)\n    const { page } = useSelector((state: any) => state.page)\n    const { skip, take } = page\n\n    const countPosts = index_post[1]\n    const count = Math.ceil(countPosts / page.take)\n\n    useEffect(() => {\n        const fetch = async (): Promise<void> => {\n            setLoading(true)\n            const api = new Api({})\n            const data = await api.index({ skip, take })\n            dispatch(setIndexPost(data))\n        }\n        fetch()\n    }, [dispatch, setLoading, skip, take])\n\n\n    // Read More button\n\n    // const content_text: any = []\n    // let getNumber = 0\n\n    // const contentData = (text: any) => { // --> ini\n\n    //     const words = text.match(/(\\w+)/g).length\n    //     if (words >= 100) {\n    //         content_text.push(text)\n    //     }\n    //     return words <= 100 ? text : slicer(text)\n    // }\n\n    // const fullContentReader: any = (text: any) => { // --> ini\n    //     const words = text.match(/(\\w+)/g).length\n    //     getNumber++\n    //     return words > 100 ? <Button variant=\"dark\" className=\"thisButton\" id={`${getNumber}`} onClick={displayfull}>Read More</Button> : null\n    // }\n\n    // const slicer = (text: string) => {\n    //     const slicer = text.slice(0, 200)\n    //     return slicer\n    // }\n\n    // const displayfull = (e: any) => {\n    //     let { textContent, id } = e.target\n    //     const data_id: any = document.getElementById(id)\n    //     const { parentNode } = data_id\n    //     const parentDiv = parentNode.childNodes[0]\n    //     const text_content = parentDiv.childNodes[4]\n    //     const index = parseInt(id) - 1\n\n    //     dispatch(setContent(content_text))\n\n    //     // console.log(index)\n\n    //     if (textContent === 'Read More') {\n    //         text_content.innerHTML = content[index]\n    //         data_id.innerHTML = 'Show less'\n    //     } else {\n    //         text_content.innerHTML = slicer(content[index])\n    //         data_id.innerHTML = 'Read More'\n    //     }\n    // }\n\n    return (\n        <>\n            <Navigation />\n            <div className=\"App\">\n                <Container>\n                    <Row>\n                        <Col md>\n                            {loading ?\n                                index_post[0].map((result: any) =>\n                                    <div className='App blogs' key={result.uuid}>\n                                        <Card>\n                                            <Card.Body>\n                                                <Card.Text>\n                                                    By : {result.infouser.username}\n                                                </Card.Text>\n                                                <Card.Text>\n                                                    Last update : {result.updatedAt}\n                                                </Card.Text>\n                                                <Card.Title>\n                                                    {result.title}\n                                                </Card.Title>\n                                                <hr />\n                                                <Card.Text className=\"content\">\n                                                    {contentData(result.content)}\n                                                </Card.Text>\n                                            </Card.Body>\n                                            {fullContentReader(result.content)}\n                                        </Card>\n                                        <br />\n                                    </div>\n                                ) : <Alert variant=\"success\">Data sedang diproses... </Alert>\n                            }\n                        </Col>\n                    </Row>\n                </Container>\n            </ div>\n            <Pagination count={count} />\n        </>\n    )\n}\n\n\nexport default Index"]},"metadata":{},"sourceType":"module"}