{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-16/client/src/components/Pagin.tsx\";\nimport { Component } from \"react\";\nimport { Pagination } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { firstPage, nextPage, previousPage, targetPage, setLoading, setIndexPost } from '../store/hooks';\nimport Api from '../api/Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Paginate extends Component {\n  constructor(props) {\n    super(props);\n\n    this.btnNumber = () => {\n      const pageNumber = [];\n\n      for (let i = 1; i <= Math.ceil(this.props.page.countBlogs / this.props.page.blogs.take); i++) {\n        pageNumber.push( /*#__PURE__*/_jsxDEV(Pagination.Item, {\n          active: i === this.props.page.blogs.currentPage,\n          onClick: async () => await this.targetButton(i),\n          children: i\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }, this));\n      }\n\n      return pageNumber;\n    };\n\n    this.targetButton = async num => {\n      try {\n        this.props.targetPage(num);\n        let {\n          take\n        } = this.props.page.blogs;\n        this.setState({\n          current: num\n        });\n        const api = new Api({\n          currentPage: this.state.current,\n          take\n        });\n        const data = await api.index();\n\n        if (data) {\n          this.props.setLoading();\n          this.props.setIndexPost(data);\n        }\n      } catch (error) {\n        console.log(`${error}`);\n      }\n    };\n\n    this.firstButton = async () => {\n      try {\n        this.props.targetPage(1);\n        let {\n          take\n        } = this.props.page.blogs;\n        this.setState({\n          current: this.state.current + 1\n        });\n        const api = new Api({\n          currentPage: this.state.current,\n          take\n        });\n        const data = await api.index();\n\n        if (data) {\n          this.props.setLoading();\n          this.props.setIndexPost(data);\n        }\n      } catch (error) {\n        console.log(`${error}`);\n      }\n    };\n\n    this.nextButton = async () => {\n      try {\n        const next = this.props.nextPage();\n        let {\n          take\n        } = this.props.page.blogs;\n        this.setState({\n          current: this.state.current + 1\n        });\n        const api = new Api({\n          currentPage: this.state.current,\n          take\n        });\n        const data = await api.index();\n\n        if (data) {\n          this.props.setLoading();\n          this.props.setIndexPost(data);\n        }\n      } catch (error) {\n        console.log(`${error}`);\n      }\n    };\n\n    this.previousButton = async () => {\n      try {\n        const next = this.props.nextPage();\n        let {\n          take\n        } = this.props.page.blogs;\n        this.setState({\n          current: this.state.current - 1\n        });\n        const api = new Api({\n          current: this.state.current,\n          take\n        });\n        const data = await api.index();\n\n        if (data) {\n          this.props.setLoading();\n          this.props.setIndexPost(data);\n        }\n      } catch (error) {\n        console.log(`${error}`);\n      }\n    };\n\n    this.lastButton = async () => {\n      console.log(this.props.page.blogs);\n      this.props.targetPage(Math.ceil(this.props.page.countBlogs / this.props.page.blogs.take));\n\n      try {\n        this.props.targetPage(this.props.page.ceil);\n        let {\n          take\n        } = this.props.page.blogs;\n        this.setState({\n          current: this.props.page.ceil\n        });\n        const api = new Api({\n          currentPage: this.state.current,\n          take\n        });\n        const data = await api.index();\n\n        if (data) {\n          this.props.setLoading();\n          this.props.setIndexPost(data);\n        }\n      } catch (error) {\n        console.log(`${error}`);\n      }\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: /*#__PURE__*/_jsxDEV(Pagination, {\n          size: \"sm\",\n          children: [/*#__PURE__*/_jsxDEV(Pagination.First, {\n            onClick: this.firstButton,\n            disabled: this.props.page.blogs.currentPage === 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Pagination.Prev, {\n            onClick: this.previousButton,\n            disabled: this.props.page.blogs.currentPage === 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 21\n          }, this), this.btnNumber(), /*#__PURE__*/_jsxDEV(Pagination.Next, {\n            onClick: this.nextButton,\n            disabled: this.props.page.blogs.currentPage === this.props.page.ceil\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Pagination.Last, {\n            onClick: this.lastButton,\n            disabled: this.props.page.blogs.currentPage === this.props.page.ceil\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = {\n      current: 1\n    };\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  page: state.page\n});\n\nconst mapDispatchToProps = dispatch => ({\n  firstPage: () => dispatch(firstPage()),\n  nextPage: () => dispatch(nextPage()),\n  setLoading: () => dispatch(setLoading()),\n  setIndexPost: data => dispatch(setIndexPost(data)),\n  previousPage: () => dispatch(previousPage()),\n  targetPage: num => dispatch(targetPage(num))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Paginate);","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/components/Pagin.tsx"],"names":["Component","Pagination","connect","firstPage","nextPage","previousPage","targetPage","setLoading","setIndexPost","Api","Paginate","constructor","props","btnNumber","pageNumber","i","Math","ceil","page","countBlogs","blogs","take","push","currentPage","targetButton","num","setState","current","api","state","data","index","error","console","log","firstButton","nextButton","next","previousButton","lastButton","render","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { Component } from \"react\"\nimport { Pagination } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport { firstPage, nextPage, previousPage, targetPage, setLoading, setIndexPost } from '../store/hooks'\nimport Api from '../api/Api'\n\n\ninterface Props {\n    page: {\n        blogs: {\n            currentPage: number\n            take: number\n        }\n        countBlogs: number\n        ceil: number\n    }\n\n    firstPage: any\n    nextPage: any\n    previousPage: any\n    targetPage: any\n    setLoading: any\n    setIndexPost: any\n\n}\n\n\ninterface State {\n    current: number\n}\n\n\n\nclass Paginate extends Component<Props, State> {\n\n\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            current: 1\n        }\n    }\n\n\n    btnNumber = () => {\n\n        const pageNumber = []\n        for (let i = 1; i <= Math.ceil(this.props.page.countBlogs / this.props.page.blogs.take); i++) {\n            pageNumber.push(<Pagination.Item key={i} active={i === this.props.page.blogs.currentPage} onClick={async () => await this.targetButton(i)} >{i}</Pagination.Item>)\n        }\n        return pageNumber\n    }\n\n    targetButton = async (num: number) => {\n        try {\n\n            this.props.targetPage(num)\n            let { take } = this.props.page.blogs\n            this.setState({ current: num })\n\n            const api = new Api({ currentPage: this.state.current, take })\n            const data: any = await api.index()\n\n            if (data) {\n                this.props.setLoading()\n                this.props.setIndexPost(data)\n            }\n\n        } catch (error) {\n            console.log(`${error}`)\n        }\n    }\n\n    firstButton = async () => {\n\n        try {\n\n            this.props.targetPage(1)\n            let { take } = this.props.page.blogs\n            this.setState({ current: this.state.current + 1 })\n\n            const api = new Api({ currentPage: this.state.current, take })\n            const data: any = await api.index()\n\n            if (data) {\n                this.props.setLoading()\n                this.props.setIndexPost(data)\n            }\n\n        } catch (error) {\n            console.log(`${error}`)\n        }\n\n    }\n\n    nextButton = async () => {\n\n        try {\n\n            const next = this.props.nextPage()\n            let { take } = this.props.page.blogs\n            this.setState({ current: this.state.current + 1 })\n\n            const api = new Api({ currentPage: this.state.current, take })\n            const data: any = await api.index()\n\n            if (data) {\n                this.props.setLoading()\n                this.props.setIndexPost(data)\n            }\n\n        } catch (error) {\n            console.log(`${error}`)\n        }\n\n    }\n\n    previousButton = async () => {\n        try {\n\n            const next = this.props.nextPage()\n            let { take } = this.props.page.blogs\n            this.setState({ current: this.state.current - 1 })\n\n            const api = new Api({ current: this.state.current, take })\n            const data: any = await api.index()\n\n            if (data) {\n                this.props.setLoading()\n                this.props.setIndexPost(data)\n            }\n\n        } catch (error) {\n            console.log(`${error}`)\n        }\n    }\n\n    lastButton = async () => {\n        console.log(this.props.page.blogs)\n        this.props.targetPage(Math.ceil(this.props.page.countBlogs / this.props.page.blogs.take))\n\n        try {\n\n            this.props.targetPage(this.props.page.ceil)\n            let { take } = this.props.page.blogs\n            this.setState({ current: this.props.page.ceil })\n\n            const api = new Api({ currentPage: this.state.current, take })\n            const data: any = await api.index()\n\n            if (data) {\n                this.props.setLoading()\n                this.props.setIndexPost(data)\n            }\n\n        } catch (error) {\n            console.log(`${error}`)\n        }\n\n\n    }\n\n    render = () => {\n\n        return (\n            <div className=\"pagination\">\n                <Pagination size=\"sm\">\n                    <Pagination.First onClick={this.firstButton} disabled={this.props.page.blogs.currentPage === 1} />\n                    <Pagination.Prev onClick={this.previousButton} disabled={this.props.page.blogs.currentPage === 1} />\n                    {\n                        this.btnNumber()\n                    }\n                    <Pagination.Next onClick={this.nextButton} disabled={this.props.page.blogs.currentPage === this.props.page.ceil} />\n                    <Pagination.Last onClick={this.lastButton} disabled={this.props.page.blogs.currentPage === this.props.page.ceil} />\n                </Pagination>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state: any) => ({\n    page: state.page\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    firstPage: () => dispatch(firstPage()),\n    nextPage: () => dispatch(nextPage()),\n    setLoading: () => dispatch(setLoading()),\n    setIndexPost: (data: any) => dispatch(setIndexPost(data)),\n    previousPage: () => dispatch(previousPage()),\n    targetPage: (num: number) => dispatch(targetPage(num))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Paginate)"]},"metadata":{},"sourceType":"module"}