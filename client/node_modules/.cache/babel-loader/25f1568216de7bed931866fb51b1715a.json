{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-16/client/src/components/HiddenButton.tsx\";\nimport { Component } from \"react\";\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HiddenButton extends Component {\n  constructor(props) {\n    super(props);\n    this.id = 0;\n\n    this.componentDidMount = () => {\n      console.log(this.state.slicer);\n    };\n\n    this.readMore = e => {\n      // console.log(this.state.textBody)\n      const {\n        parentNode\n      } = e.target;\n      const {\n        childNodes\n      } = parentNode;\n      const child = childNodes[0].childNodes[4];\n      child.innerHTML = this.state.textBody;\n    };\n\n    this.isDisplay = () => {\n      const {\n        text\n      } = this.props;\n      const words = text.match(/(\\w+)/g).length;\n      return words >= 100 ? /*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.readMore,\n        variant: \"dark\",\n        children: \"Read more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 100\n      }, this);\n    };\n\n    this.textBody = text => {\n      const words = text.match(/(\\w+)/g).length;\n\n      if (words >= 100) {\n        console.log(words);\n      }\n\n      return words <= 100 ? text : this.slicer(text);\n    };\n\n    this.slicer = text => {\n      const slicer = text.slice(0, 200); // this.setState({ slicer: `${slicer}...` })\n\n      return `${slicer}...`;\n    };\n\n    this.render = () => {\n      return this.isDisplay();\n    };\n\n    this.state = {\n      textBody: this.props.text,\n      slicer: '',\n      id: 0\n    };\n  }\n\n}\n\nexport default HiddenButton;","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/components/HiddenButton.tsx"],"names":["Component","Button","HiddenButton","constructor","props","id","componentDidMount","console","log","state","slicer","readMore","e","parentNode","target","childNodes","child","innerHTML","textBody","isDisplay","text","words","match","length","slice","render"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,QAAuB,iBAAvB;;;AAaA,MAAMC,YAAN,SAA2BF,SAA3B,CAAmD;AAI/CG,EAAAA,WAAW,CAACC,KAAD,EAAa;AACpB,UAAMA,KAAN;AADoB,SAFxBC,EAEwB,GAFX,CAEW;;AAAA,SASxBC,iBATwB,GASJ,MAAM;AACtBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,MAAvB;AACH,KAXuB;;AAAA,SAaxBC,QAbwB,GAaZC,CAAD,IAAY;AACnB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAiBD,CAAC,CAACE,MAAzB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAiBF,UAAvB;AACA,YAAMG,KAAK,GAAGD,UAAU,CAAC,CAAD,CAAV,CAAcA,UAAd,CAAyB,CAAzB,CAAd;AACAC,MAAAA,KAAK,CAACC,SAAN,GAAkB,KAAKR,KAAL,CAAWS,QAA7B;AACH,KAnBuB;;AAAA,SAqBxBC,SArBwB,GAqBZ,MAAM;AACd,YAAM;AAAEC,QAAAA;AAAF,UAAgB,KAAKhB,KAA3B;AACA,YAAMiB,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,QAAX,EAAqBC,MAAnC;AACA,aAAOF,KAAK,IAAI,GAAT,gBAAe,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKV,QAAtB;AAAgC,QAAA,OAAO,EAAC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAf,gBAAoF;AAAA;AAAA;AAAA;AAAA,cAA3F;AACH,KAzBuB;;AAAA,SA2BxBO,QA3BwB,GA2BZE,IAAD,IAAe;AAEtB,YAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,QAAX,EAAqBC,MAAnC;;AACA,UAAIF,KAAK,IAAI,GAAb,EAAkB;AACdd,QAAAA,OAAO,CAACC,GAAR,CAAYa,KAAZ;AACH;;AACD,aAAOA,KAAK,IAAI,GAAT,GAAeD,IAAf,GAAsB,KAAKV,MAAL,CAAYU,IAAZ,CAA7B;AACH,KAlCuB;;AAAA,SAoCxBV,MApCwB,GAoCdU,IAAD,IAAkB;AACvB,YAAMV,MAAM,GAAGU,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,GAAd,CAAf,CADuB,CAEvB;;AACA,aAAQ,GAAEd,MAAO,KAAjB;AACH,KAxCuB;;AAAA,SA0CxBe,MA1CwB,GA0Cf,MAAM;AACX,aAAO,KAAKN,SAAL,EAAP;AACH,KA5CuB;;AAEpB,SAAKV,KAAL,GAAa;AACTS,MAAAA,QAAQ,EAAE,KAAKd,KAAL,CAAWgB,IADZ;AAETV,MAAAA,MAAM,EAAE,EAFC;AAGTL,MAAAA,EAAE,EAAE;AAHK,KAAb;AAKH;;AAX8C;;AAmDnD,eAAeH,YAAf","sourcesContent":["import { Component } from \"react\"\nimport { Button } from 'react-bootstrap'\n\n\ninterface Props {\n    text: string\n}\n\ninterface State {\n    textBody: string\n    slicer: string\n    id: number\n}\n\nclass HiddenButton extends Component<Props, State> {\n\n    id: number = 0\n\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            textBody: this.props.text,\n            slicer: '',\n            id: 0\n        }\n    }\n\n    componentDidMount = () => {\n        console.log(this.state.slicer)\n    }\n\n    readMore = (e: any) => {\n        // console.log(this.state.textBody)\n        const { parentNode } = e.target\n        const { childNodes } = parentNode\n        const child = childNodes[0].childNodes[4]\n        child.innerHTML = this.state.textBody\n    }\n\n    isDisplay = () => {\n        const { text }: any = this.props\n        const words = text.match(/(\\w+)/g).length\n        return words >= 100 ? <Button onClick={this.readMore} variant=\"dark\" >Read more</Button> : <p></p>\n    }\n\n    textBody = (text: any) => {\n\n        const words = text.match(/(\\w+)/g).length\n        if (words >= 100) {\n            console.log(words)\n        }\n        return words <= 100 ? text : this.slicer(text)\n    }\n\n    slicer = (text: string) => {\n        const slicer = text.slice(0, 200)\n        // this.setState({ slicer: `${slicer}...` })\n        return `${slicer}...`\n    }\n\n    render = () => {\n        return this.isDisplay()\n    }\n}\n\nexport default HiddenButton"]},"metadata":{},"sourceType":"module"}