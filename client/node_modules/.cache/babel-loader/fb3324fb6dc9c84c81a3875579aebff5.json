{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-16/client/src/components/Comment.tsx\";\nimport { Component } from \"react\";\nimport { Button, Form, Card } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { setHiddenComments, setIsHide } from '../store/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Comment extends Component {\n  constructor(props) {\n    super(props);\n    this.count = 0;\n\n    this.componentDidMount = () => {\n      this.setState({\n        dataHide: this.props.infocomments\n      });\n    };\n\n    this.commentValue = e => {\n      const {\n        value\n      } = e.target;\n      this.setState({\n        comments: value\n      });\n    };\n\n    this.submit = async e => {\n      const {\n        comments\n      } = this.state;\n\n      if (this.props.data.login === false) {\n        alert('You need to login!');\n      } else if (comments === '') {\n        alert(`Don't submit empty data!`);\n      } else {\n        // console.log(this.state)\n        const {\n          uuid\n        } = this.props.result;\n        const data = {\n          username: this.props.data.user.username,\n          user_uuid: this.props.data.user.uuid,\n          post_uuid: uuid,\n          comments\n        };\n\n        try {\n          console.log(this.props.infocomments); //     const api = new Api(data)\n          //     const result: any = await api.addComment()\n          //     if (result) {\n          //         this.setState({ isHide: 'block' })\n          //    }\n        } catch (error) {\n          const {\n            data\n          } = error.response;\n          alert(data.message);\n        }\n      }\n    };\n\n    this.displayComments = e => {\n      return this.state.isHide === 'none' ? this.setState({\n        isHide: 'block'\n      }) : this.setState({\n        isHide: 'none'\n      });\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n          className: \"displayComments\",\n          onClick: this.displayComments,\n          children: [this.props.result.infocomments.length, \" comments\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 17\n        }, this), this.props.infocomments.length !== 0 ? /*#__PURE__*/_jsxDEV(Card, {\n          className: \"cardComments\",\n          style: {\n            display: this.state.isHide\n          },\n          children: this.props.infocomments.map(res => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [res.username, \" :\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: res.comments\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 41\n            }, this)]\n          }, res.uuid, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"textarea\",\n          placeholder: \"Add comments\",\n          name: \"comments\",\n          onChange: this.commentValue,\n          rows: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"dark\",\n          onClick: this.submit,\n          children: \"Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true);\n    };\n\n    this.state = {\n      comments: '',\n      isHide: this.props.data.isHide,\n      dataHide: []\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    console.log(props.infocemmonts);\n    console.log(state);\n    return null;\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setHiddenComments: data => dispatch(setHiddenComments(data)),\n  setIsHide: data => dispatch(setIsHide(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/components/Comment.tsx"],"names":["Component","Button","Form","Card","connect","setHiddenComments","setIsHide","Comment","constructor","props","count","componentDidMount","setState","dataHide","infocomments","commentValue","e","value","target","comments","submit","state","data","login","alert","uuid","result","username","user","user_uuid","post_uuid","console","log","error","response","message","displayComments","isHide","render","length","display","map","res","getDerivedStateFromProps","infocemmonts","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["\nimport { Component } from \"react\"\nimport { Button, Form, Card } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport Api from '../api/Api'\nimport { setHiddenComments, setIsHide } from '../store/hooks'\n\n\ninterface Props {\n    data: {\n        login: boolean\n        user: {\n            uuid: string\n            username: string\n        }\n        index_post: {\n            0: any\n        }\n        isHide: string\n    }\n\n    result: any\n    infocomments: any\n    setHiddenComments: any\n    setIsHide: any\n    history: any\n}\n\ninterface State {\n    comments: string\n    isHide: string\n    dataHide: any\n}\n\n\nclass Comment extends Component<Props | any, State> {\n\n\n    count: number = 0\n\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            comments: '',\n            isHide: this.props.data.isHide,\n            dataHide: []\n        }\n    }\n\n\n    static getDerivedStateFromProps(props: any, state: any) {\n        console.log(props.infocemmonts)\n        console.log(state)\n        return null\n    }\n\n\n    componentDidMount = () => {\n        this.setState({ dataHide: this.props.infocomments })\n    }\n\n\n    commentValue = (e: any) => {\n        const { value } = e.target\n        this.setState({ comments: value })\n    }\n\n    submit = async (e: any): Promise<void> => {\n\n        const { comments } = this.state\n\n        if (this.props.data.login === false) {\n            alert('You need to login!')\n        } else if (comments === '') {\n            alert(`Don't submit empty data!`)\n        } else {\n            // console.log(this.state)\n            const { uuid } = this.props.result\n            const data = {\n                username: this.props.data.user.username,\n                user_uuid: this.props.data.user.uuid,\n                post_uuid: uuid,\n                comments\n            }\n\n            try {\n\n                console.log(this.props.infocomments)\n\n                //     const api = new Api(data)\n                //     const result: any = await api.addComment()\n\n                //     if (result) {\n                //         this.setState({ isHide: 'block' })\n                //    }\n\n\n            } catch (error) {\n                const { data } = error.response\n                alert(data.message)\n            }\n\n        }\n    }\n\n    displayComments = (e: any) => {\n        return this.state.isHide === 'none' ?\n            this.setState({ isHide: 'block' }) :\n            this.setState({ isHide: 'none' })\n    }\n\n\n    render = () => {\n\n        return (\n            <>\n                <Card.Text className=\"displayComments\" onClick={this.displayComments}>{this.props.result.infocomments.length} comments</Card.Text>\n                <hr />\n                {\n                    this.props.infocomments.length !== 0 ?\n                        <Card className=\"cardComments\" style={{ display: this.state.isHide }}>\n                            {\n                                this.props.infocomments.map((res: any) =>\n                                    <div key={res.uuid}>\n                                        <p>{res.username} :</p>\n                                        <p>{res.comments}</p>\n                                        <hr />\n                                    </ div>\n                                )\n                            }\n                        </ Card> :\n                        null\n                }\n                <br />\n                <Form.Control as=\"textarea\" placeholder=\"Add comments\" name=\"comments\" onChange={this.commentValue} rows={2} />\n                <br />\n                <Button variant=\"dark\" onClick={this.submit}>Comment</Button>\n            </>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state: any) => ({\n    data: state.data\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    setHiddenComments: (data: any) => dispatch(setHiddenComments(data)),\n    setIsHide: (data: string) => dispatch(setIsHide(data))\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment)"]},"metadata":{},"sourceType":"module"}