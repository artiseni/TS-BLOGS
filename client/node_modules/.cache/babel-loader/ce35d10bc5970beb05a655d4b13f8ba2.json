{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-16/client/src/pages/Index.tsx\";\nimport { Component } from 'react';\nimport Navigation from '../components/Navigation';\nimport { connect } from 'react-redux';\nimport { Container, Row, Col, Card, Alert } from 'react-bootstrap';\nimport HiddenButton from '../components/HiddenButton';\nimport Api from '../api/Api';\nimport Paginate from '../components/Pagin';\nimport Comment from '../components/Comment';\nimport { setLoading, setCountBlogs, setIndexPost, setCeil } from '../store/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Index extends Component {\n  constructor(props) {\n    super(props);\n    this.setLoading = void 0;\n    this.setCountBlogs = void 0;\n    this.setIndexPost = void 0;\n    this.setCeil = void 0;\n\n    this.componentDidMount = () => {\n      console.log(`Mounted`);\n      this.updatePage();\n    };\n\n    this.shouldComponentUpdate = () => {\n      // console.log(`Should be updated? --> ${this.data}`)\n      return true;\n    };\n\n    this.componentDidUpdate = () => {\n      console.log(`Updated`);\n    };\n\n    this.componentWillUnmount = () => {\n      console.log(`Will unmount`);\n    };\n\n    this.updatePage = async () => {\n      try {\n        const api = new Api(this.props.page.blogs);\n        const data = await api.index();\n\n        if (data) {\n          this.setLoading();\n          this.setIndexPost(data);\n          this.setCountBlogs(data[1]);\n          this.setCeil();\n        }\n      } catch (error) {\n        console.log(`${error}`);\n      }\n    };\n\n    this.displayComments = () => {\n      console.log(100);\n    };\n\n    this.render = () => {\n      const {\n        loading\n      } = this.props.page;\n      const hidden = new HiddenButton({});\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: [/*#__PURE__*/_jsxDEV(Container, {\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                md: true,\n                children: loading ? this.props.page.index_post[0].map(result => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"App blogs\",\n                  children: [/*#__PURE__*/_jsxDEV(Card, {\n                    children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n                      children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n                        children: [\"By : \", result.infouser.username]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 118,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                        children: [\"Last update : \", result.updatedAt]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 121,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(Card.Title, {\n                        children: result.title\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 124,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 127,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                        className: \"content\",\n                        children: hidden.textBody(result.content)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 128,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 131,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: \"displayComments\",\n                        onClick: this.displayComments,\n                        children: [result.infocomments.length, \" comments\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 132,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(Comment, {\n                        info: result\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 133,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 117,\n                      columnNumber: 49\n                    }, this), /*#__PURE__*/_jsxDEV(HiddenButton, {\n                      text: result.content\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 135,\n                      columnNumber: 49\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 116,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 137,\n                    columnNumber: 45\n                  }, this)]\n                }, result.uuid, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 41\n                }, this)) : /*#__PURE__*/_jsxDEV(Alert, {\n                  variant: \"success\",\n                  children: \"Processing data... \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 139,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Paginate, {\n            type: \"index\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true);\n    };\n\n    const {\n      setLoading,\n      setCountBlogs,\n      setIndexPost,\n      setCeil\n    } = this.props;\n    this.setLoading = setLoading;\n    this.setCountBlogs = setCountBlogs;\n    this.setIndexPost = setIndexPost;\n    this.setCeil = setCeil; // console.log(this.props)\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  page: state.page\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setLoading: () => dispatch(setLoading()),\n    setCeil: () => dispatch(setCeil()),\n    setCountBlogs: num => dispatch(setCountBlogs(num)),\n    setIndexPost: data => dispatch(setIndexPost(data))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/pages/Index.tsx"],"names":["Component","Navigation","connect","Container","Row","Col","Card","Alert","HiddenButton","Api","Paginate","Comment","setLoading","setCountBlogs","setIndexPost","setCeil","Index","constructor","props","componentDidMount","console","log","updatePage","shouldComponentUpdate","componentDidUpdate","componentWillUnmount","api","page","blogs","data","index","error","displayComments","render","loading","hidden","index_post","map","result","infouser","username","updatedAt","title","textBody","content","infocomments","length","uuid","mapStateToProps","state","mapDispatchToProps","dispatch","num"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport Navigation from '../components/Navigation'\nimport { connect } from 'react-redux'\nimport { Container, Row, Col, Card, Alert } from 'react-bootstrap'\nimport HiddenButton from '../components/HiddenButton'\nimport Api from '../api/Api'\nimport Paginate from '../components/Pagin'\nimport Comment from '../components/Comment'\nimport { setLoading, setCountBlogs, setIndexPost, setCeil } from '../store/hooks'\n\n\ninterface Props {\n    page: {\n        blogs: {\n            currentPage: number\n            skip: number\n        }\n        loading: boolean\n        countBlogs: number\n        index_post: {\n            0: any\n            1: number\n        }\n\n    }\n\n    setLoading: any\n    setCountBlogs: any\n    setIndexPost: any\n    setCeil: any\n\n}\n\n\nclass Index extends Component<Props>{\n\n\n    setLoading: any\n    setCountBlogs: any\n    setIndexPost: any\n    setCeil: any\n\n    constructor(props: any) {\n\n        super(props)\n\n        const { setLoading, setCountBlogs, setIndexPost, setCeil }: any = this.props\n\n        this.setLoading = setLoading\n        this.setCountBlogs = setCountBlogs\n        this.setIndexPost = setIndexPost\n        this.setCeil = setCeil\n\n        // console.log(this.props)\n\n    }\n\n    componentDidMount = () => {\n        console.log(`Mounted`)\n        this.updatePage()\n    }\n\n    shouldComponentUpdate = (): boolean => {\n        // console.log(`Should be updated? --> ${this.data}`)\n        return true\n    }\n\n    componentDidUpdate = (): void => {\n        console.log(`Updated`)\n    }\n\n    componentWillUnmount = () => {\n        console.log(`Will unmount`)\n    }\n\n    updatePage = async (): Promise<void> => {\n\n        try {\n            const api = new Api(this.props.page.blogs)\n            const data: any = await api.index()\n\n            if (data) {\n                this.setLoading()\n                this.setIndexPost(data)\n                this.setCountBlogs(data[1])\n                this.setCeil()\n            }\n\n        } catch (error) {\n            console.log(`${error}`)\n        }\n\n    }\n\n    displayComments = () => {\n        console.log(100)\n    }\n\n\n    render = (): JSX.Element => {\n\n        const { loading } = this.props.page\n        const hidden = new HiddenButton({})\n\n\n        return (\n            <>\n                <Navigation />\n                <div className=\"App\">\n                    <Container>\n                        <Row>\n                            <Col md>\n                                {loading ?\n                                    this.props.page.index_post[0].map((result: any) =>\n                                        <div className='App blogs' key={result.uuid}>\n                                            <Card>\n                                                <Card.Body>\n                                                    <Card.Text>\n                                                        By : {result.infouser.username}\n                                                    </Card.Text>\n                                                    <Card.Text>\n                                                        Last update : {result.updatedAt}\n                                                    </Card.Text>\n                                                    <Card.Title>\n                                                        {result.title}\n                                                    </Card.Title>\n                                                    <hr />\n                                                    <Card.Text className=\"content\">\n                                                        {hidden.textBody(result.content)}\n                                                    </Card.Text>\n                                                    <br />\n                                                    <p className=\"displayComments\" onClick={this.displayComments}>{result.infocomments.length} comments</p>\n                                                    <Comment info={result} />\n                                                </Card.Body>\n                                                <HiddenButton text={result.content} />\n                                            </Card>\n                                            <br />\n                                        </div>\n                                    ) : <Alert variant=\"success\">Processing data... </Alert>\n                                }\n                            </Col>\n                        </Row>\n                    </Container>\n                    <Paginate type=\"index\" />\n                </div>\n            </>\n        )\n    }\n}\n\nconst mapStateToProps = (state: any) => ({\n    page: state.page\n})\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        setLoading: () => dispatch(setLoading()),\n        setCeil: () => dispatch(setCeil()),\n        setCountBlogs: (num: number) => dispatch(setCountBlogs(num)),\n        setIndexPost: (data: any) => dispatch(setIndexPost(data))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Index)"]},"metadata":{},"sourceType":"module"}