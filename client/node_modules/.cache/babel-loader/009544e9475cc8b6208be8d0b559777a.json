{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-04/client/src/Functions/functions.tsx\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setContent } from '../store/data';\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dispatch = useDispatch();\nconst {\n  content\n} = useSelector(state => state.data);\nconst content_text = [];\nlet getNumber = 0;\n\nconst contentData = text => {\n  // --> export\n  const words = text.match(/(\\w+)/g).length;\n\n  if (words >= 100) {\n    content_text.push(text);\n  }\n\n  return words <= 100 ? text : slicer(text);\n};\n\nconst fullContentReader = text => {\n  // --> export\n  const words = text.match(/(\\w+)/g).length;\n  getNumber++;\n  return words > 100 ? /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"dark\",\n    className: \"thisButton\",\n    id: `${getNumber}`,\n    onClick: displayfull,\n    children: \" Read More \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 26\n  }, this) : null;\n};\n\nconst slicer = text => {\n  const slicer = text.slice(0, 200);\n  return slicer;\n};\n\nconst displayfull = e => {\n  let {\n    textContent,\n    id\n  } = e.target;\n  const data_id = document.getElementById(id);\n  const {\n    parentNode\n  } = data_id;\n  const parentDiv = parentNode.childNodes[0];\n  const text_content = parentDiv.childNodes[4];\n  const index = parseInt(id) - 1;\n  dispatch(setContent(content_text));\n\n  if (textContent === 'Read More') {\n    text_content.innerHTML = content[index];\n    data_id.innerHTML = 'Show less';\n  } else {\n    text_content.innerHTML = slicer(content[index]);\n    data_id.innerHTML = 'Read More';\n  }\n};\n\nexport { contentData, fullContentReader };\nexport {};","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-04/client/src/Functions/functions.tsx"],"names":["useDispatch","useSelector","setContent","Button","dispatch","content","state","data","content_text","getNumber","contentData","text","words","match","length","push","slicer","fullContentReader","displayfull","slice","e","textContent","id","target","data_id","document","getElementById","parentNode","parentDiv","childNodes","text_content","index","parseInt","innerHTML"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,MAAT,QAAuB,iBAAvB;;AAGA,MAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAcJ,WAAW,CAAEK,KAAD,IAAgBA,KAAK,CAACC,IAAvB,CAA/B;AAEA,MAAMC,YAAiB,GAAG,EAA1B;AACA,IAAIC,SAAS,GAAG,CAAhB;;AAEA,MAAMC,WAAW,GAAIC,IAAD,IAAe;AAAE;AAEjC,QAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,QAAX,EAAqBC,MAAnC;;AACA,MAAIF,KAAK,IAAI,GAAb,EAAkB;AACdJ,IAAAA,YAAY,CAACO,IAAb,CAAkBJ,IAAlB;AACH;;AACD,SAAOC,KAAK,IAAI,GAAT,GAAeD,IAAf,GAAsBK,MAAM,CAACL,IAAD,CAAnC;AACH,CAPD;;AASA,MAAMM,iBAAsB,GAAIN,IAAD,IAAe;AAAE;AAC5C,QAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,QAAX,EAAqBC,MAAnC;AACAL,EAAAA,SAAS;AACT,SAAOG,KAAK,GAAG,GAAR,gBAAc,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,MAAhB;AAAuB,IAAA,SAAS,EAAC,YAAjC;AAA8C,IAAA,EAAE,EAAG,GAAEH,SAAU,EAA/D;AAAkE,IAAA,OAAO,EAAES,WAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAd,GAA6H,IAApI;AACH,CAJD;;AAMA,MAAMF,MAAM,GAAIL,IAAD,IAAkB;AAC7B,QAAMK,MAAM,GAAGL,IAAI,CAACQ,KAAL,CAAW,CAAX,EAAc,GAAd,CAAf;AACA,SAAOH,MAAP;AACH,CAHD;;AAKA,MAAME,WAAW,GAAIE,CAAD,IAAY;AAC5B,MAAI;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAsBF,CAAC,CAACG,MAA5B;AACA,QAAMC,OAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwBJ,EAAxB,CAArB;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAiBH,OAAvB;AACA,QAAMI,SAAS,GAAGD,UAAU,CAACE,UAAX,CAAsB,CAAtB,CAAlB;AACA,QAAMC,YAAY,GAAGF,SAAS,CAACC,UAAV,CAAqB,CAArB,CAArB;AACA,QAAME,KAAK,GAAGC,QAAQ,CAACV,EAAD,CAAR,GAAe,CAA7B;AAEAlB,EAAAA,QAAQ,CAACF,UAAU,CAACM,YAAD,CAAX,CAAR;;AAEA,MAAIa,WAAW,KAAK,WAApB,EAAiC;AAC7BS,IAAAA,YAAY,CAACG,SAAb,GAAyB5B,OAAO,CAAC0B,KAAD,CAAhC;AACAP,IAAAA,OAAO,CAACS,SAAR,GAAoB,WAApB;AACH,GAHD,MAGO;AACHH,IAAAA,YAAY,CAACG,SAAb,GAAyBjB,MAAM,CAACX,OAAO,CAAC0B,KAAD,CAAR,CAA/B;AACAP,IAAAA,OAAO,CAACS,SAAR,GAAoB,WAApB;AACH;AACJ,CAjBD;;AAoBA,SAASvB,WAAT,EAAsBO,iBAAtB;AACA","sourcesContent":["import { useDispatch, useSelector } from 'react-redux'\nimport { setContent } from '../store/data'\nimport { Button } from 'react-bootstrap'\n\n\nconst dispatch = useDispatch()\nconst { content } = useSelector((state: any) => state.data)\n\nconst content_text: any = []\nlet getNumber = 0\n\nconst contentData = (text: any) => { // --> export\n\n    const words = text.match(/(\\w+)/g).length\n    if (words >= 100) {\n        content_text.push(text)\n    }\n    return words <= 100 ? text : slicer(text)\n}\n\nconst fullContentReader: any = (text: any) => { // --> export\n    const words = text.match(/(\\w+)/g).length\n    getNumber++\n    return words > 100 ? <Button variant=\"dark\" className=\"thisButton\" id={`${getNumber}`} onClick={displayfull}> Read More </Button> : null\n}\n\nconst slicer = (text: string) => {\n    const slicer = text.slice(0, 200)\n    return slicer\n}\n\nconst displayfull = (e: any) => {\n    let { textContent, id } = e.target\n    const data_id: any = document.getElementById(id)\n    const { parentNode } = data_id\n    const parentDiv = parentNode.childNodes[0]\n    const text_content = parentDiv.childNodes[4]\n    const index = parseInt(id) - 1\n\n    dispatch(setContent(content_text))\n\n    if (textContent === 'Read More') {\n        text_content.innerHTML = content[index]\n        data_id.innerHTML = 'Show less'\n    } else {\n        text_content.innerHTML = slicer(content[index])\n        data_id.innerHTML = 'Read More'\n    }\n}\n\n\nexport { contentData, fullContentReader }\nexport { }"]},"metadata":{},"sourceType":"module"}