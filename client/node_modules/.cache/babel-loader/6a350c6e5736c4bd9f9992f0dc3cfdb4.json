{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-16/client/src/components/Comment.tsx\";\nimport { Component } from \"react\";\nimport { Button, Form, Card } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { setHiddenComments, setIsHide } from '../store/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Comment extends Component {\n  constructor(props) {\n    super(props);\n    this.count = 0;\n\n    this.componentDidMount = () => {\n      this.setState({\n        dataHide: this.props.infocomments\n      });\n    };\n\n    this.commentValue = e => {\n      const {\n        value\n      } = e.target;\n      this.setState({\n        comments: value\n      });\n    };\n\n    this.submit = async e => {\n      const {\n        comments\n      } = this.state;\n\n      if (this.props.data.login === false) {\n        alert('You need to login!');\n      } else if (comments === '') {\n        alert(`Don't submit empty data!`);\n      } else {\n        // console.log(this.state)\n        const {\n          uuid\n        } = this.props.result;\n        const data = {\n          username: this.props.data.user.username,\n          user_uuid: this.props.data.user.uuid,\n          post_uuid: uuid,\n          comments\n        };\n\n        try {\n          const promise = new Promise(res => {\n            res(window.location.reload());\n          });\n          const res = await promise;\n\n          if (res) {\n            e.target.parentNode.id = 'isHide';\n            console.log(this.state.dataHide);\n          } // this.setState({ isHide: 'block' })\n          // this.props.setIsHide('none')\n          // window.location.reload()\n          // const api = new Api(data)\n          // const result: any = await api.addComment()\n          // if (result) {\n\n\n          this.setState({\n            isHide: 'block'\n          }); // }\n        } catch (error) {\n          const {\n            data\n          } = error.response;\n          alert(data.message);\n        }\n      }\n    };\n\n    this.displayComments = e => {\n      return this.state.isHide === 'none' ? this.setState({\n        isHide: 'block'\n      }) : this.setState({\n        isHide: 'none'\n      });\n    };\n\n    this.hiddenComments = () => {\n      return this.props.infocomments.length !== 0 ? /*#__PURE__*/_jsxDEV(Card, {\n        className: \"cardComments\",\n        style: {\n          display: this.state.isHide\n        },\n        children: this.props.infocomments.map(res => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [res.username, \" :\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: res.comments\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 29\n          }, this)]\n        }, res.uuid, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this) : null;\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n          className: \"displayComments\",\n          \"aria-disabled\": this.props.result.infocomments.length === 0,\n          onClick: this.displayComments,\n          children: [this.props.result.infocomments.length, \" comments\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 17\n        }, this), this.hiddenComments(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"textarea\",\n          placeholder: \"Add comments\",\n          name: \"comments\",\n          onChange: this.commentValue,\n          rows: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"dark\",\n          onClick: this.submit,\n          children: \"Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true);\n    };\n\n    this.state = {\n      comments: '',\n      isHide: this.props.data.isHide,\n      dataHide: []\n    };\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setHiddenComments: data => dispatch(setHiddenComments(data)),\n  setIsHide: data => dispatch(setIsHide(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/components/Comment.tsx"],"names":["Component","Button","Form","Card","connect","setHiddenComments","setIsHide","Comment","constructor","props","count","componentDidMount","setState","dataHide","infocomments","commentValue","e","value","target","comments","submit","state","data","login","alert","uuid","result","username","user","user_uuid","post_uuid","promise","Promise","res","window","location","reload","parentNode","id","console","log","isHide","error","response","message","displayComments","hiddenComments","length","display","map","render","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,IAAvB,QAAmC,iBAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,iBAAT,EAA4BC,SAA5B,QAA6C,gBAA7C;;;;AA4BA,MAAMC,OAAN,SAAsBP,SAAtB,CAAoD;AAKhDQ,EAAAA,WAAW,CAACC,KAAD,EAAa;AACpB,UAAMA,KAAN;AADoB,SAFxBC,KAEwB,GAFR,CAEQ;;AAAA,SAUxBC,iBAVwB,GAUJ,MAAM;AACtB,WAAKC,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWK;AAAvB,OAAd;AACH,KAZuB;;AAAA,SAexBC,YAfwB,GAeRC,CAAD,IAAY;AACvB,YAAM;AAAEC,QAAAA;AAAF,UAAYD,CAAC,CAACE,MAApB;AACA,WAAKN,QAAL,CAAc;AAAEO,QAAAA,QAAQ,EAAEF;AAAZ,OAAd;AACH,KAlBuB;;AAAA,SAoBxBG,MApBwB,GAoBf,MAAOJ,CAAP,IAAiC;AAEtC,YAAM;AAAEG,QAAAA;AAAF,UAAe,KAAKE,KAA1B;;AAEA,UAAI,KAAKZ,KAAL,CAAWa,IAAX,CAAgBC,KAAhB,KAA0B,KAA9B,EAAqC;AACjCC,QAAAA,KAAK,CAAC,oBAAD,CAAL;AACH,OAFD,MAEO,IAAIL,QAAQ,KAAK,EAAjB,EAAqB;AACxBK,QAAAA,KAAK,CAAE,0BAAF,CAAL;AACH,OAFM,MAEA;AACH;AACA,cAAM;AAAEC,UAAAA;AAAF,YAAW,KAAKhB,KAAL,CAAWiB,MAA5B;AACA,cAAMJ,IAAI,GAAG;AACTK,UAAAA,QAAQ,EAAE,KAAKlB,KAAL,CAAWa,IAAX,CAAgBM,IAAhB,CAAqBD,QADtB;AAETE,UAAAA,SAAS,EAAE,KAAKpB,KAAL,CAAWa,IAAX,CAAgBM,IAAhB,CAAqBH,IAFvB;AAGTK,UAAAA,SAAS,EAAEL,IAHF;AAITN,UAAAA;AAJS,SAAb;;AAOA,YAAI;AAEA,gBAAMY,OAAO,GAAG,IAAIC,OAAJ,CAAYC,GAAG,IAAI;AAC/BA,YAAAA,GAAG,CAACC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAAD,CAAH;AACH,WAFe,CAAhB;AAIA,gBAAMH,GAAG,GAAG,MAAMF,OAAlB;;AAEA,cAAIE,GAAJ,EAAS;AACLjB,YAAAA,CAAC,CAACE,MAAF,CAASmB,UAAT,CAAoBC,EAApB,GAAyB,QAAzB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAKnB,KAAL,CAAWR,QAAvB;AACH,WAXD,CAeA;AACA;AACA;AAIA;AACA;AAEA;;;AACA,eAAKD,QAAL,CAAc;AAAE6B,YAAAA,MAAM,EAAE;AAAV,WAAd,EAzBA,CA0BA;AAEH,SA5BD,CA4BE,OAAOC,KAAP,EAAc;AACZ,gBAAM;AAAEpB,YAAAA;AAAF,cAAWoB,KAAK,CAACC,QAAvB;AACAnB,UAAAA,KAAK,CAACF,IAAI,CAACsB,OAAN,CAAL;AACH;AAEJ;AACJ,KAxEuB;;AAAA,SA0ExBC,eA1EwB,GA0EL7B,CAAD,IAAY;AAC1B,aAAO,KAAKK,KAAL,CAAWoB,MAAX,KAAsB,MAAtB,GACH,KAAK7B,QAAL,CAAc;AAAE6B,QAAAA,MAAM,EAAE;AAAV,OAAd,CADG,GAEH,KAAK7B,QAAL,CAAc;AAAE6B,QAAAA,MAAM,EAAE;AAAV,OAAd,CAFJ;AAGH,KA9EuB;;AAAA,SAgFxBK,cAhFwB,GAgFP,MAAM;AAEnB,aAAO,KAAKrC,KAAL,CAAWK,YAAX,CAAwBiC,MAAxB,KAAmC,CAAnC,gBACH,QAAC,IAAD;AAAM,QAAA,SAAS,EAAC,cAAhB;AAA+B,QAAA,KAAK,EAAE;AAAEC,UAAAA,OAAO,EAAE,KAAK3B,KAAL,CAAWoB;AAAtB,SAAtC;AAAA,kBAEQ,KAAKhC,KAAL,CAAWK,YAAX,CAAwBmC,GAAxB,CAA6BhB,GAAD,iBACxB;AAAA,kCACI;AAAA,uBAAIA,GAAG,CAACN,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,sBAAIM,GAAG,CAACd;AAAR;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA,WAAUc,GAAG,CAACR,IAAd;AAAA;AAAA;AAAA;AAAA,gBADJ;AAFR;AAAA;AAAA;AAAA;AAAA,cADG,GAYH,IAZJ;AAaH,KA/FuB;;AAAA,SAiGxByB,MAjGwB,GAiGf,MAAM;AAEX,0BACI;AAAA,gCACI,QAAC,IAAD,CAAM,IAAN;AAAW,UAAA,SAAS,EAAC,iBAArB;AAAuC,2BAAe,KAAKzC,KAAL,CAAWiB,MAAX,CAAkBZ,YAAlB,CAA+BiC,MAA/B,KAA0C,CAAhG;AAAmG,UAAA,OAAO,EAAE,KAAKF,eAAjH;AAAA,qBAAmI,KAAKpC,KAAL,CAAWiB,MAAX,CAAkBZ,YAAlB,CAA+BiC,MAAlK;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAGK,KAAKD,cAAL,EAHL,eAII;AAAA;AAAA;AAAA;AAAA,gBAJJ,eAKI,QAAC,IAAD,CAAM,OAAN;AAAc,UAAA,EAAE,EAAC,UAAjB;AAA4B,UAAA,WAAW,EAAC,cAAxC;AAAuD,UAAA,IAAI,EAAC,UAA5D;AAAuE,UAAA,QAAQ,EAAE,KAAK/B,YAAtF;AAAoG,UAAA,IAAI,EAAE;AAA1G;AAAA;AAAA;AAAA;AAAA,gBALJ,eAMI;AAAA;AAAA;AAAA;AAAA,gBANJ,eAOI,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,MAAhB;AAAuB,UAAA,OAAO,EAAE,KAAKK,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ;AAAA,sBADJ;AAWH,KA9GuB;;AAEpB,SAAKC,KAAL,GAAa;AACTF,MAAAA,QAAQ,EAAE,EADD;AAETsB,MAAAA,MAAM,EAAE,KAAKhC,KAAL,CAAWa,IAAX,CAAgBmB,MAFf;AAGT5B,MAAAA,QAAQ,EAAE;AAHD,KAAb;AAKH;;AAZ+C;;AAuHpD,MAAMsC,eAAe,GAAI9B,KAAD,KAAiB;AACrCC,EAAAA,IAAI,EAAED,KAAK,CAACC;AADyB,CAAjB,CAAxB;;AAIA,MAAM8B,kBAAkB,GAAIC,QAAD,KAAoB;AAC3ChD,EAAAA,iBAAiB,EAAGiB,IAAD,IAAe+B,QAAQ,CAAChD,iBAAiB,CAACiB,IAAD,CAAlB,CADC;AAE3ChB,EAAAA,SAAS,EAAGgB,IAAD,IAAkB+B,QAAQ,CAAC/C,SAAS,CAACgB,IAAD,CAAV;AAFM,CAApB,CAA3B;;AAMA,eAAelB,OAAO,CAAC+C,eAAD,EAAkBC,kBAAlB,CAAP,CAA6C7C,OAA7C,CAAf","sourcesContent":["\nimport { Component } from \"react\"\nimport { Button, Form, Card } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport Api from '../api/Api'\nimport { setHiddenComments, setIsHide } from '../store/hooks'\n\n\ninterface Props {\n    data: {\n        login: boolean\n        user: {\n            uuid: string\n            username: string\n        }\n        index_post: {\n            0: any\n        }\n        isHide: string\n    }\n    result: any\n    infocomments: any\n    setHiddenComments: any\n    setIsHide: any\n}\n\ninterface State {\n    comments: string\n    isHide: string\n    dataHide: any\n}\n\n\nclass Comment extends Component<Props | any, State> {\n\n\n    count: number = 0\n\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            comments: '',\n            isHide: this.props.data.isHide,\n            dataHide: []\n        }\n    }\n\n\n    componentDidMount = () => {\n        this.setState({ dataHide: this.props.infocomments })\n    }\n\n\n    commentValue = (e: any) => {\n        const { value } = e.target\n        this.setState({ comments: value })\n    }\n\n    submit = async (e: any): Promise<void> => {\n\n        const { comments } = this.state\n\n        if (this.props.data.login === false) {\n            alert('You need to login!')\n        } else if (comments === '') {\n            alert(`Don't submit empty data!`)\n        } else {\n            // console.log(this.state)\n            const { uuid } = this.props.result\n            const data = {\n                username: this.props.data.user.username,\n                user_uuid: this.props.data.user.uuid,\n                post_uuid: uuid,\n                comments\n            }\n\n            try {\n\n                const promise = new Promise(res => {\n                    res(window.location.reload())\n                })\n\n                const res = await promise\n\n                if (res) {\n                    e.target.parentNode.id = 'isHide'\n                    console.log(this.state.dataHide)\n                }\n\n\n\n                // this.setState({ isHide: 'block' })\n                // this.props.setIsHide('none')\n                // window.location.reload()\n\n\n\n                // const api = new Api(data)\n                // const result: any = await api.addComment()\n\n                // if (result) {\n                this.setState({ isHide: 'block' })\n                // }\n\n            } catch (error) {\n                const { data } = error.response\n                alert(data.message)\n            }\n\n        }\n    }\n\n    displayComments = (e: any) => {\n        return this.state.isHide === 'none' ?\n            this.setState({ isHide: 'block' }) :\n            this.setState({ isHide: 'none' })\n    }\n\n    hiddenComments = () => {\n\n        return this.props.infocomments.length !== 0 ?\n            <Card className=\"cardComments\" style={{ display: this.state.isHide }}>\n                {\n                    this.props.infocomments.map((res: any) =>\n                        <div key={res.uuid}>\n                            <p>{res.username} :</p>\n                            <p>{res.comments}</p>\n                            <hr />\n                        </ div>\n                    )\n                }\n            </ Card> :\n            null\n    }\n\n    render = () => {\n\n        return (\n            <>\n                <Card.Text className=\"displayComments\" aria-disabled={this.props.result.infocomments.length === 0} onClick={this.displayComments}>{this.props.result.infocomments.length} comments</Card.Text>\n                <hr />\n                {this.hiddenComments()}\n                <br />\n                <Form.Control as=\"textarea\" placeholder=\"Add comments\" name=\"comments\" onChange={this.commentValue} rows={2} />\n                <br />\n                <Button variant=\"dark\" onClick={this.submit}>Comment</Button>\n            </>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state: any) => ({\n    data: state.data\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    setHiddenComments: (data: any) => dispatch(setHiddenComments(data)),\n    setIsHide: (data: string) => dispatch(setIsHide(data))\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment)"]},"metadata":{},"sourceType":"module"}