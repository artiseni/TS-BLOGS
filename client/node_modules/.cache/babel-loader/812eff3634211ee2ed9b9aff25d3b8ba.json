{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-16/client/src/components/Comment.tsx\";\nimport { Component } from \"react\";\nimport { Button, Form } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport DisplayComments from './DisplayComments';\nimport Api from '../api/Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Comment extends Component {\n  constructor(props) {\n    super(props);\n\n    this.commentValue = e => {\n      const {\n        value\n      } = e.target;\n      this.setState({\n        comments: value\n      });\n    };\n\n    this.submit = async () => {\n      if (this.props.data.login === false) {\n        alert('Login first!');\n      } else {\n        // console.log(this.state)\n        const {\n          comments\n        } = this.state;\n        const {\n          uuid\n        } = this.props.info;\n        const data = {\n          user_uuid: this.props.data.user.uuid,\n          post_uuid: uuid,\n          comments\n        }; // console.log(data)\n\n        try {\n          const api = new Api(data);\n          const result = await api.addComment();\n\n          if (result) {\n            console.log(result);\n          }\n        } catch (error) {\n          const {\n            data\n          } = error.response;\n          alert(data.message);\n        }\n      }\n    };\n\n    this.displayComments = () => {\n      console.log(100);\n    };\n\n    this.render = () => {\n      console.log(this.props.data.index_post[0]);\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"displayComments\",\n          onClick: this.displayComments,\n          children: [this.props.info.infocomments.length, \" comments\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(DisplayComments, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"textarea\",\n          placeholder: \"Add comments\",\n          name: \"comments\",\n          onChange: this.commentValue,\n          rows: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"dark\",\n          onClick: this.submit,\n          children: \"Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true);\n    };\n\n    this.state = {\n      comments: ''\n    };\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nexport default connect(mapStateToProps)(Comment);","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/components/Comment.tsx"],"names":["Component","Button","Form","connect","DisplayComments","Api","Comment","constructor","props","commentValue","e","value","target","setState","comments","submit","data","login","alert","state","uuid","info","user_uuid","user","post_uuid","api","result","addComment","console","log","error","response","message","displayComments","render","index_post","infocomments","length","mapStateToProps"],"mappings":"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","sourcesContent":["import { Component } from \"react\"\nimport { Button, Form } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport DisplayComments from './DisplayComments'\nimport Api from '../api/Api'\n\n\ninterface Props {\n    data: {\n        login: boolean\n        user: {\n            uuid: string\n        }\n        index_post: {\n            0: any\n        }\n    }\n    info: any\n}\n\ninterface State {\n    comments: string\n}\n\n\nclass Comment extends Component<Props, State> {\n\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            comments: ''\n        }\n    }\n\n    commentValue = (e: any) => {\n        const { value } = e.target\n        this.setState({ comments: value })\n    }\n\n    submit = async (): Promise<void> => {\n        if (this.props.data.login === false) {\n            alert('Login first!')\n        } else {\n            // console.log(this.state)\n            const { comments } = this.state\n            const { uuid } = this.props.info\n            const data = {\n                user_uuid: this.props.data.user.uuid,\n                post_uuid: uuid,\n                comments\n            }\n            // console.log(data)\n            try {\n                const api = new Api(data)\n                const result: any = await api.addComment()\n                if (result) {\n                    console.log(result)\n                }\n            } catch (error) {\n                const { data } = error.response\n                alert(data.message)\n            }\n\n        }\n    }\n\n    displayComments = () => {\n        console.log(100)\n    }\n\n    render = () => {\n\n        console.log(this.props.data.index_post[0])\n\n        return (\n            <>\n                <p className=\"displayComments\" onClick={this.displayComments}>{this.props.info.infocomments.length} comments</p>\n                <hr />\n                <DisplayComments />\n                <Form.Control as=\"textarea\" placeholder=\"Add comments\" name=\"comments\" onChange={this.commentValue} rows={2} />\n                <br />\n                <Button variant=\"dark\" onClick={this.submit}>Comment</Button>\n            </>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state: any) => ({\n    data: state.data\n})\n\n\nexport default connect(mapStateToProps)(Comment)"]},"metadata":{},"sourceType":"module"}