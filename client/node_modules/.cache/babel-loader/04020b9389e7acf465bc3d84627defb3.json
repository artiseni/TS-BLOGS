{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-16/client/src/components/HiddenButton.tsx\";\nimport { Component } from \"react\";\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HiddenButton extends Component {\n  constructor(props) {\n    super(props);\n    this.id = 0;\n\n    this.componentDidMount = () => {\n      const text = this.state.textBody;\n      console.log(text);\n    };\n\n    this.readMore = e => {\n      // console.log(this.state.textBody)\n      console.log(e.target);\n    };\n\n    this.isDisplay = () => {\n      const {\n        text\n      } = this.props;\n      const words = text.match(/(\\w+)/g).length;\n      return words >= 100 ? /*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.readMore,\n        id: `${this.id + 1}`,\n        variant: \"dark\",\n        children: \"Read more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 122\n      }, this);\n    };\n\n    this.textBody = text => {\n      const words = text.match(/(\\w+)/g).length;\n\n      if (words >= 100) {\n        console.log(words);\n      }\n\n      return words <= 100 ? text : this.slicer(text);\n    };\n\n    this.slicer = text => {\n      const slicer = text.slice(0, 200);\n      return `${slicer}...`;\n    };\n\n    this.render = () => {\n      return this.isDisplay();\n    };\n\n    this.state = {\n      textBody: this.props.text,\n      id: 0\n    };\n  }\n\n}\n\nexport default HiddenButton;","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/components/HiddenButton.tsx"],"names":["Component","Button","HiddenButton","constructor","props","id","componentDidMount","text","state","textBody","console","log","readMore","e","target","isDisplay","words","match","length","slicer","slice","render"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,QAAuB,iBAAvB;;;AAYA,MAAMC,YAAN,SAA2BF,SAA3B,CAAmD;AAI/CG,EAAAA,WAAW,CAACC,KAAD,EAAa;AACpB,UAAMA,KAAN;AADoB,SAFxBC,EAEwB,GAFX,CAEW;;AAAA,SAQxBC,iBARwB,GAQJ,MAAM;AACtB,YAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,QAAxB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACH,KAXuB;;AAAA,SAaxBK,QAbwB,GAaZC,CAAD,IAAY;AACnB;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAC,CAACC,MAAd;AACH,KAhBuB;;AAAA,SAkBxBC,SAlBwB,GAkBZ,MAAM;AACd,YAAM;AAAER,QAAAA;AAAF,UAAgB,KAAKH,KAA3B;AACA,YAAMY,KAAK,GAAGT,IAAI,CAACU,KAAL,CAAW,QAAX,EAAqBC,MAAnC;AACA,aAAOF,KAAK,IAAI,GAAT,gBAAe,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKJ,QAAtB;AAAgC,QAAA,EAAE,EAAG,GAAE,KAAKP,EAAL,GAAU,CAAE,EAAnD;AAAsD,QAAA,OAAO,EAAC,MAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAf,gBAA0G;AAAA;AAAA;AAAA;AAAA,cAAjH;AACH,KAtBuB;;AAAA,SAwBxBI,QAxBwB,GAwBZF,IAAD,IAAe;AAEtB,YAAMS,KAAK,GAAGT,IAAI,CAACU,KAAL,CAAW,QAAX,EAAqBC,MAAnC;;AACA,UAAIF,KAAK,IAAI,GAAb,EAAkB;AACdN,QAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACH;;AACD,aAAOA,KAAK,IAAI,GAAT,GAAeT,IAAf,GAAsB,KAAKY,MAAL,CAAYZ,IAAZ,CAA7B;AACH,KA/BuB;;AAAA,SAiCxBY,MAjCwB,GAiCdZ,IAAD,IAAkB;AACvB,YAAMY,MAAM,GAAGZ,IAAI,CAACa,KAAL,CAAW,CAAX,EAAc,GAAd,CAAf;AACA,aAAQ,GAAED,MAAO,KAAjB;AACH,KApCuB;;AAAA,SAsCxBE,MAtCwB,GAsCf,MAAM;AACX,aAAO,KAAKN,SAAL,EAAP;AACH,KAxCuB;;AAEpB,SAAKP,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWG,IADZ;AAETF,MAAAA,EAAE,EAAE;AAFK,KAAb;AAIH;;AAV8C;;AA+CnD,eAAeH,YAAf","sourcesContent":["import { Component } from \"react\"\nimport { Button } from 'react-bootstrap'\n\n\ninterface Props {\n    text: string\n}\n\ninterface State {\n    textBody: string\n    id: number\n}\n\nclass HiddenButton extends Component<Props, State> {\n\n    id: number = 0\n\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            textBody: this.props.text,\n            id: 0\n        }\n    }\n\n    componentDidMount = () => {\n        const text = this.state.textBody\n        console.log(text)\n    }\n\n    readMore = (e: any) => {\n        // console.log(this.state.textBody)\n        console.log(e.target)\n    }\n\n    isDisplay = () => {\n        const { text }: any = this.props\n        const words = text.match(/(\\w+)/g).length\n        return words >= 100 ? <Button onClick={this.readMore} id={`${this.id + 1}`} variant=\"dark\" >Read more</Button> : <p></p>\n    }\n\n    textBody = (text: any) => {\n\n        const words = text.match(/(\\w+)/g).length\n        if (words >= 100) {\n            console.log(words)\n        }\n        return words <= 100 ? text : this.slicer(text)\n    }\n\n    slicer = (text: string) => {\n        const slicer = text.slice(0, 200)\n        return `${slicer}...`\n    }\n\n    render = () => {\n        return this.isDisplay()\n    }\n}\n\nexport default HiddenButton"]},"metadata":{},"sourceType":"module"}