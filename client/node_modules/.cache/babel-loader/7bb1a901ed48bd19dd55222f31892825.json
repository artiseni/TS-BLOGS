{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-16/client/src/components/Comment.tsx\";\nimport { Component } from \"react\";\nimport { Button, Form, Card } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport Api from '../api/Api';\nimport { setHiddenComments, setIsHide, setIndexPost } from '../store/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Comment extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {// console.log(this.state.dataHide)\n    };\n\n    this.commentValue = e => {\n      const {\n        value\n      } = e.target;\n      this.setState({\n        comments: value\n      });\n    };\n\n    this.displayHiddenComments = (parentNode, username, comments) => {\n      const elements = parentNode.getElementsByClassName('cardComments');\n      const textarea = parentNode.querySelector('textarea');\n      const div = document.createElement('div');\n      const p1 = document.createElement('p');\n      const p2 = document.createElement('p');\n      const hr = document.createElement('hr');\n      const name = document.createTextNode(`${username} :`);\n      const comment = document.createTextNode(comments);\n      p1.appendChild(name);\n      p2.appendChild(comment);\n      div.appendChild(p1);\n      div.appendChild(p2);\n      div.appendChild(hr);\n      elements[0].appendChild(div);\n      this.setState({\n        isHide: 'block'\n      });\n      textarea.value = '';\n    };\n\n    this.submit = async e => {\n      const {\n        comments\n      } = this.state;\n\n      if (this.props.data.login === false) {\n        alert('You need to login!');\n      } else if (comments === '') {\n        alert(`Don't submit empty data!`);\n      } else {\n        // console.log(this.state)\n        const {\n          uuid\n        } = this.props.result;\n        const data = {\n          username: this.props.data.user.username,\n          user_uuid: this.props.data.user.uuid,\n          post_uuid: uuid,\n          comments\n        };\n\n        try {\n          const api = new Api(data);\n          const result = await api.addComment();\n\n          if (result) {\n            const index_data = new Api(this.props.page.blogs);\n            const res = await index_data.index();\n\n            if (res) {\n              new Promise(data => {\n                data(this.props.setIndexPost(res));\n              }).then(() => this.setState({\n                isHide: 'block'\n              }));\n            }\n          }\n        } catch (error) {\n          console.log(`${error}`);\n        }\n      }\n    };\n\n    this.displayComments = e => {\n      return this.state.isHide === 'none' ? this.setState({\n        isHide: 'block'\n      }) : this.setState({\n        isHide: 'none'\n      });\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n          className: \"displayComments\",\n          onClick: this.displayComments,\n          children: [this.props.infocomments.length, \" comments\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 17\n        }, this), this.state.dataHide.length !== 0 ? /*#__PURE__*/_jsxDEV(Card, {\n          className: \"cardComments\",\n          style: {\n            display: this.state.isHide\n          },\n          children: this.state.dataHide.map(res => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [res.username, \" :\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: res.comments\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 41\n            }, this)]\n          }, res.uuid, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 25\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"textarea\",\n          placeholder: \"Add comments\",\n          name: \"comments\",\n          onChange: this.commentValue,\n          rows: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"dark\",\n          onClick: this.submit,\n          children: \"Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true);\n    };\n\n    this.state = {\n      comments: '',\n      isHide: this.props.data.isHide,\n      dataHide: [],\n      pushData: null\n    };\n  }\n\n}\n\nComment.getDerivedStateFromProps = (props, state) => {\n  state.dataHide = props.infocomments;\n  return null;\n};\n\nconst mapStateToProps = state => ({\n  data: state.data,\n  page: state.page\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setHiddenComments: data => dispatch(setHiddenComments(data)),\n  setIsHide: data => dispatch(setIsHide(data)),\n  setIndexPost: data => dispatch(setIndexPost(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/components/Comment.tsx"],"names":["Component","Button","Form","Card","connect","Api","setHiddenComments","setIsHide","setIndexPost","Comment","constructor","props","componentDidMount","commentValue","e","value","target","setState","comments","displayHiddenComments","parentNode","username","elements","getElementsByClassName","textarea","querySelector","div","document","createElement","p1","p2","hr","name","createTextNode","comment","appendChild","isHide","submit","state","data","login","alert","uuid","result","user","user_uuid","post_uuid","api","addComment","index_data","page","blogs","res","index","Promise","then","error","console","log","displayComments","render","infocomments","length","dataHide","display","map","pushData","getDerivedStateFromProps","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["\nimport { Component } from \"react\"\nimport { Button, Form, Card } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport Api from '../api/Api'\nimport { setHiddenComments, setIsHide, setIndexPost } from '../store/hooks'\n\n\ninterface Props {\n    data: {\n        login: boolean\n        blogs: any\n        user: {\n            uuid: string\n            username: string\n        }\n        index_post: {\n            0: any\n        }\n        isHide: string\n    }\n\n    page: { blogs: any }\n\n    result: any\n    infocomments: any\n    setHiddenComments: any\n    setIndexPost: any\n    setIsHide: any\n    history?: any\n}\n\ninterface State {\n    comments: string\n    isHide: string\n    dataHide: any\n    pushData: any\n}\n\n\nclass Comment extends Component<Props | any, State> {\n\n\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            comments: '',\n            isHide: this.props.data.isHide,\n            dataHide: [],\n            pushData: null\n        }\n    }\n\n\n    static getDerivedStateFromProps = (props: any, state: any) => {\n        state.dataHide = props.infocomments\n        return null\n    }\n\n\n    componentDidMount = () => {\n        // console.log(this.state.dataHide)\n    }\n\n\n    commentValue = (e: any) => {\n        const { value } = e.target\n        this.setState({ comments: value })\n    }\n\n    displayHiddenComments = (parentNode: any, username: string, comments: string) => {\n\n        const elements = parentNode.getElementsByClassName('cardComments')\n        const textarea = parentNode.querySelector('textarea')\n\n        const div = document.createElement('div')\n        const p1 = document.createElement('p')\n        const p2 = document.createElement('p')\n        const hr = document.createElement('hr')\n        const name = document.createTextNode(`${username} :`)\n        const comment = document.createTextNode(comments)\n\n        p1.appendChild(name)\n        p2.appendChild(comment)\n\n        div.appendChild(p1)\n        div.appendChild(p2)\n        div.appendChild(hr)\n\n        elements[0].appendChild(div)\n        this.setState({ isHide: 'block' })\n        textarea.value = ''\n    }\n\n    submit = async (e: any): Promise<void> => {\n\n        const { comments } = this.state\n\n        if (this.props.data.login === false) {\n            alert('You need to login!')\n        } else if (comments === '') {\n            alert(`Don't submit empty data!`)\n        } else {\n            // console.log(this.state)\n            const { uuid } = this.props.result\n            const data = {\n                username: this.props.data.user.username,\n                user_uuid: this.props.data.user.uuid,\n                post_uuid: uuid,\n                comments\n            }\n\n            try {\n\n                const api = new Api(data)\n                const result: any = await api.addComment()\n\n                if (result) {\n\n                    const index_data = new Api(this.props.page.blogs)\n                    const res: any = await index_data.index()\n\n                    if (res) {\n                        new Promise(data => {\n                            data(this.props.setIndexPost(res))\n                        }).then(() => this.setState({ isHide: 'block' }))\n                    }\n                }\n\n            } catch (error) {\n                console.log(`${error}`)\n            }\n\n        }\n    }\n\n    displayComments = (e: any) => {\n        return this.state.isHide === 'none' ?\n            this.setState({ isHide: 'block' }) :\n            this.setState({ isHide: 'none' })\n    }\n\n\n    render = () => {\n\n        return (\n            <>\n                <Card.Text className=\"displayComments\" onClick={this.displayComments}>{this.props.infocomments.length} comments</Card.Text>\n                <hr />\n                {\n                    this.state.dataHide.length !== 0 ?\n                        <Card className=\"cardComments\" style={{ display: this.state.isHide }}>\n                            {\n                                this.state.dataHide.map((res: any) =>\n                                    <div key={res.uuid}>\n                                        <p>{res.username} :</p>\n                                        <p>{res.comments}</p>\n                                        <hr />\n                                    </ div>\n                                )\n                            }\n                        </ Card> :\n                        null\n                }\n                <br />\n                <Form.Control as=\"textarea\" placeholder=\"Add comments\" name=\"comments\" onChange={this.commentValue} rows={2} />\n                <br />\n                <Button variant=\"dark\" onClick={this.submit}>Comment</Button>\n            </>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state: any) => ({\n    data: state.data,\n    page: state.page\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    setHiddenComments: (data: any) => dispatch(setHiddenComments(data)),\n    setIsHide: (data: string) => dispatch(setIsHide(data)),\n    setIndexPost: (data: any) => dispatch(setIndexPost(data))\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment)"]},"metadata":{},"sourceType":"module"}