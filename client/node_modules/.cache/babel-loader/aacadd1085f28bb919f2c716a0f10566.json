{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-16/client/src/components/Comment.tsx\";\nimport { Component } from \"react\";\nimport { Button, Form, Card } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { setHiddenComments, setIsHide } from '../store/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Comment extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = () => {// console.log(this.state.dataHide)\n    };\n\n    this.commentValue = e => {\n      const {\n        value\n      } = e.target;\n      this.setState({\n        comments: value\n      });\n    };\n\n    this.submit = async e => {\n      const {\n        comments\n      } = this.state;\n\n      if (this.props.data.login === false) {\n        alert('You need to login!');\n      } else if (comments === '') {\n        alert(`Don't submit empty data!`);\n      } else {\n        // console.log(this.state)\n        const {\n          uuid\n        } = this.props.result;\n        const data = {\n          username: this.props.data.user.username,\n          user_uuid: this.props.data.user.uuid,\n          post_uuid: uuid,\n          comments\n        };\n\n        try {\n          const result = {\n            uuid: \"ccb20589-d3b8-4ddb-af8e-3546de137331\",\n            createdAt: \"2021-08-20T22:38:39.090Z\",\n            updatedAt: \"2021-08-20T22:38:39.090Z\",\n            username: \"Pusing\",\n            comments: \"Aing!\"\n          };\n          const {\n            uuid,\n            createdAt,\n            updatedAt,\n            username,\n            comments\n          } = result;\n          this.setState({\n            dataHide: {\n              uuid,\n              createdAt,\n              updatedAt,\n              username,\n              comments\n            }\n          }, () => {\n            console.log(this.state.dataHide.length);\n          }); // const api = new Api(data)\n          // const result: any = await api.addComment()\n          // if (result) {\n          //     const { uuid, createdAt, updatedAt, username, comments } = result\n          //     this.setState({ dataHide: { ...this.state.dataHide, uuid, createdAt, updatedAt, username, comments } }, () => {\n          //         console.log(this.state.dataHide)\n          //     })\n          // }\n        } catch (error) {\n          console.log(`${error}`);\n        }\n      }\n    };\n\n    this.displayComments = e => {\n      return this.state.isHide === 'none' ? this.setState({\n        isHide: 'block'\n      }) : this.setState({\n        isHide: 'none'\n      });\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n          className: \"displayComments\",\n          onClick: this.displayComments,\n          children: [this.props.infocomments.length, \" comments\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }, this), this.state.dataHide.length !== 0 ? /*#__PURE__*/_jsxDEV(Card, {\n          className: \"cardComments\",\n          style: {\n            display: this.state.isHide\n          },\n          children: this.state.dataHide.map(res => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [res.username, \" :\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: res.comments\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 41\n            }, this)]\n          }, res.uuid, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"textarea\",\n          placeholder: \"Add comments\",\n          name: \"comments\",\n          onChange: this.commentValue,\n          rows: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"dark\",\n          onClick: this.submit,\n          children: \"Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true);\n    };\n\n    this.state = {\n      comments: '',\n      isHide: this.props.data.isHide,\n      dataHide: [],\n      pushData: {\n        kuda: 'jaran'\n      }\n    };\n  }\n\n}\n\nComment.getDerivedStateFromProps = (props, state) => {\n  state.dataHide = props.infocomments;\n\n  if (state.pushData) {\n    console.log(state.pushData);\n  }\n\n  return null;\n};\n\nconst mapStateToProps = state => ({\n  data: state.data,\n  page: state.page\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setHiddenComments: data => dispatch(setHiddenComments(data)),\n  setIsHide: data => dispatch(setIsHide(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment);","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/components/Comment.tsx"],"names":["Component","Button","Form","Card","connect","setHiddenComments","setIsHide","Comment","constructor","props","componentDidMount","commentValue","e","value","target","setState","comments","submit","state","data","login","alert","uuid","result","username","user","user_uuid","post_uuid","createdAt","updatedAt","dataHide","console","log","length","error","displayComments","isHide","render","infocomments","display","map","res","pushData","kuda","getDerivedStateFromProps","mapStateToProps","page","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["\nimport { Component } from \"react\"\nimport { Button, Form, Card } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport Api from '../api/Api'\nimport { setHiddenComments, setIsHide } from '../store/hooks'\n\n\ninterface Props {\n    data: {\n        login: boolean\n        user: {\n            uuid: string\n            username: string\n        }\n        index_post: {\n            0: any\n        }\n        isHide: string\n    }\n\n    page: { blogs: any }\n\n    result: any\n    infocomments: any\n    setHiddenComments: any\n    setIsHide: any\n    history?: any\n}\n\ninterface State {\n    comments: string\n    isHide: string\n    dataHide: any\n    pushData: any\n}\n\n\nclass Comment extends Component<Props | any, State> {\n\n\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            comments: '',\n            isHide: this.props.data.isHide,\n            dataHide: [],\n            pushData: { kuda: 'jaran' }\n        }\n    }\n\n\n    static getDerivedStateFromProps = (props: any, state: any) => {\n        state.dataHide = props.infocomments\n        if (state.pushData) {\n            console.log(state.pushData)\n        }\n        return null\n    }\n\n\n    componentDidMount = () => {\n        // console.log(this.state.dataHide)\n    }\n\n\n    commentValue = (e: any) => {\n        const { value } = e.target\n        this.setState({ comments: value })\n    }\n\n    submit = async (e: any): Promise<void> => {\n\n        const { comments } = this.state\n\n        if (this.props.data.login === false) {\n            alert('You need to login!')\n        } else if (comments === '') {\n            alert(`Don't submit empty data!`)\n        } else {\n            // console.log(this.state)\n            const { uuid } = this.props.result\n            const data = {\n                username: this.props.data.user.username,\n                user_uuid: this.props.data.user.uuid,\n                post_uuid: uuid,\n                comments\n            }\n\n            try {\n\n                const result = { uuid: \"ccb20589-d3b8-4ddb-af8e-3546de137331\", createdAt: \"2021-08-20T22:38:39.090Z\", updatedAt: \"2021-08-20T22:38:39.090Z\", username: \"Pusing\", comments: \"Aing!\" }\n\n                const { uuid, createdAt, updatedAt, username, comments } = result\n\n                this.setState({\n                    dataHide: { uuid, createdAt, updatedAt, username, comments }\n                }, () => {\n                    console.log(this.state.dataHide.length)\n                })\n\n\n                // const api = new Api(data)\n                // const result: any = await api.addComment()\n\n                // if (result) {\n                //     const { uuid, createdAt, updatedAt, username, comments } = result\n                //     this.setState({ dataHide: { ...this.state.dataHide, uuid, createdAt, updatedAt, username, comments } }, () => {\n                //         console.log(this.state.dataHide)\n                //     })\n                // }\n\n            } catch (error) {\n                console.log(`${error}`)\n            }\n\n        }\n    }\n\n    displayComments = (e: any) => {\n        return this.state.isHide === 'none' ?\n            this.setState({ isHide: 'block' }) :\n            this.setState({ isHide: 'none' })\n    }\n\n\n    render = () => {\n\n        return (\n            <>\n                <Card.Text className=\"displayComments\" onClick={this.displayComments}>{this.props.infocomments.length} comments</Card.Text>\n                <hr />\n                {\n                    this.state.dataHide.length !== 0 ?\n                        <Card className=\"cardComments\" style={{ display: this.state.isHide }}>\n                            {\n                                this.state.dataHide.map((res: any) =>\n                                    <div key={res.uuid}>\n                                        <p>{res.username} :</p>\n                                        <p>{res.comments}</p>\n                                        <hr />\n                                    </ div>\n                                )\n                            }\n                        </ Card> :\n                        null\n                }\n                <br />\n                <Form.Control as=\"textarea\" placeholder=\"Add comments\" name=\"comments\" onChange={this.commentValue} rows={2} />\n                <br />\n                <Button variant=\"dark\" onClick={this.submit}>Comment</Button>\n            </>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state: any) => ({\n    data: state.data,\n    page: state.page\n})\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    setHiddenComments: (data: any) => dispatch(setHiddenComments(data)),\n    setIsHide: (data: string) => dispatch(setIsHide(data))\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Comment)"]},"metadata":{},"sourceType":"module"}