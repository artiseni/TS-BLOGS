{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-16/client/src/pages/Index.tsx\";\nimport { Component } from 'react';\nimport Navigation from '../components/Navigation';\nimport { Container, Row, Col, Card, Alert } from 'react-bootstrap';\nimport Api from '../api/Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Index extends Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      // console.log(`Mounted`)\n      const api = new Api({});\n      const data = await api.index(this.state.params);\n      this.setState({\n        data,\n        loading: true\n      });\n    };\n\n    this.shouldComponentUpdate = () => {\n      // console.log(`Should be updated?`)\n      return true;\n    };\n\n    this.componentDidUpdate = () => {\n      console.log(`Updated`);\n    };\n\n    this.componentWillUnmount = () => {\n      console.log(`Will unmount`);\n    };\n\n    this.slicer = text => {\n      const slicer = text.slice(0, 200);\n      return `${slicer}...`;\n    };\n\n    this.textBody = text => {\n      const words = text.match(/(\\w+)/g).length;\n\n      if (words >= 100) {\n        console.log(words);\n      }\n\n      return words <= 100 ? text : this.slicer(text);\n    };\n\n    this.render = () => {\n      // console.log(`Render`)\n      // console.log(this.state.data[0])\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"App\",\n          children: /*#__PURE__*/_jsxDEV(Container, {\n            children: /*#__PURE__*/_jsxDEV(Row, {\n              children: /*#__PURE__*/_jsxDEV(Col, {\n                md: true,\n                children: this.state.loading ? this.state.data[0].map(result => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"App blogs\",\n                  children: [/*#__PURE__*/_jsxDEV(Card, {\n                    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n                      children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n                        children: [\"By : \", result.infouser.username]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 92,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                        children: [\"Last update : \", result.updatedAt]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 95,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(Card.Title, {\n                        children: result.title\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 98,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 101,\n                        columnNumber: 53\n                      }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                        className: \"content\",\n                        children: this.textBody(result.content)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 102,\n                        columnNumber: 53\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 91,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 107,\n                    columnNumber: 45\n                  }, this)]\n                }, result.uuid, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 41\n                }, this)) : /*#__PURE__*/_jsxDEV(Alert, {\n                  variant: \"success\",\n                  children: \"Data sedang diproses... \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true);\n    };\n\n    this.state = {\n      params: {\n        skip: 0,\n        take: 4\n      },\n      loading: false,\n      data: [{}, 0]\n    };\n    console.log(`Constructor`);\n  } // life cycle\n\n\n}\n\nIndex.getDerivedStateFromProps = (props, state) => {\n  // console.log(`getDerived`)\n  return null;\n};\n\nexport default Index;","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/pages/Index.tsx"],"names":["Component","Navigation","Container","Row","Col","Card","Alert","Api","Index","constructor","props","componentDidMount","api","data","index","state","params","setState","loading","shouldComponentUpdate","componentDidUpdate","console","log","componentWillUnmount","slicer","text","slice","textBody","words","match","length","render","map","result","infouser","username","updatedAt","title","content","uuid","skip","take","getDerivedStateFromProps"],"mappings":"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","sourcesContent":["import { Component } from 'react'\nimport Navigation from '../components/Navigation'\nimport { Container, Row, Col, Card, Alert } from 'react-bootstrap'\nimport Api from '../api/Api'\n\ninterface State {\n    params: {\n        skip: number,\n        take: number\n    }\n    data: any\n    loading: boolean\n}\n\nclass Index extends Component<any, State> {\n\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            params: {\n                skip: 0,\n                take: 4\n            },\n            loading: false,\n            data: [{}, 0]\n        }\n        console.log(`Constructor`)\n    }\n\n\n    // life cycle\n\n    static getDerivedStateFromProps = (props: any, state: State) => {\n        // console.log(`getDerived`)\n        return null\n    }\n\n    componentDidMount = async (): Promise<void> => {\n        // console.log(`Mounted`)\n        const api = new Api({})\n        const data = await api.index(this.state.params)\n        this.setState({ data, loading: true })\n    }\n\n    shouldComponentUpdate = (): boolean => {\n        // console.log(`Should be updated?`)\n        return true\n    }\n\n    componentDidUpdate = (): void => {\n        console.log(`Updated`)\n    }\n\n    componentWillUnmount = () => {\n        console.log(`Will unmount`)\n    }\n\n    // adding\n\n    slicer = (text: string) => {\n        const slicer = text.slice(0, 200)\n        return `${slicer}...`\n    }\n\n    textBody = (text: any) => {\n\n        const words = text.match(/(\\w+)/g).length\n        if (words >= 100) {\n            console.log(words)\n        }\n        return words <= 100 ? text : this.slicer(text)\n    }\n\n\n    render = (): JSX.Element => {\n\n        // console.log(`Render`)\n        // console.log(this.state.data[0])\n\n        return (\n            <>\n                <Navigation />\n                <div className=\"App\">\n                    <Container>\n                        <Row>\n                            <Col md>\n                                {this.state.loading ?\n                                    this.state.data[0].map((result: any) =>\n                                        <div className='App blogs' key={result.uuid}>\n                                            <Card>\n                                                <Card.Body>\n                                                    <Card.Text>\n                                                        By : {result.infouser.username}\n                                                    </Card.Text>\n                                                    <Card.Text>\n                                                        Last update : {result.updatedAt}\n                                                    </Card.Text>\n                                                    <Card.Title>\n                                                        {result.title}\n                                                    </Card.Title>\n                                                    <hr />\n                                                    <Card.Text className=\"content\">\n                                                        {this.textBody(result.content)}\n                                                    </Card.Text>\n                                                </Card.Body>\n                                            </Card>\n                                            <br />\n                                        </div>\n                                    ) : <Alert variant=\"success\">Data sedang diproses... </Alert>\n                                }\n                            </Col>\n                        </Row>\n                    </Container>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default Index"]},"metadata":{},"sourceType":"module"}