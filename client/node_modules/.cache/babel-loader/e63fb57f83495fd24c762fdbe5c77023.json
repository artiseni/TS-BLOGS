{"ast":null,"code":"var _jsxFileName = \"/home/linux/Documents/IMIN/AUGUST-16/client/src/components/HiddenButton.tsx\";\nimport { Component } from \"react\";\nimport { Button } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HiddenButton extends Component {\n  constructor(props) {\n    super(props);\n    this.id = 0;\n\n    this.componentDidMount = () => {\n      this.setState({\n        id: this.state.id + 1\n      });\n    };\n\n    this.readMore = e => {\n      // console.log(this.state.textBody)\n      const {\n        parentNode\n      } = e.target;\n      const {\n        childNodes\n      } = parentNode;\n      const child = childNodes[0].childNodes;\n      console.log(child);\n    };\n\n    this.isDisplay = () => {\n      const {\n        text\n      } = this.props;\n      const words = text.match(/(\\w+)/g).length;\n      return words >= 100 ? /*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.readMore,\n        variant: \"dark\",\n        children: \"Read more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 31\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 100\n      }, this);\n    };\n\n    this.textBody = text => {\n      const words = text.match(/(\\w+)/g).length;\n\n      if (words >= 100) {\n        console.log(words);\n      }\n\n      return words <= 100 ? text : this.slicer(text);\n    };\n\n    this.slicer = text => {\n      const slicer = text.slice(0, 200);\n      return `${slicer}...`;\n    };\n\n    this.render = () => {\n      return this.isDisplay();\n    };\n\n    this.state = {\n      textBody: this.props.text,\n      id: 0\n    };\n  }\n\n}\n\nexport default HiddenButton;","map":{"version":3,"sources":["/home/linux/Documents/IMIN/AUGUST-16/client/src/components/HiddenButton.tsx"],"names":["Component","Button","HiddenButton","constructor","props","id","componentDidMount","setState","state","readMore","e","parentNode","target","childNodes","child","console","log","isDisplay","text","words","match","length","textBody","slicer","slice","render"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,QAAuB,iBAAvB;;;AAYA,MAAMC,YAAN,SAA2BF,SAA3B,CAAmD;AAI/CG,EAAAA,WAAW,CAACC,KAAD,EAAa;AACpB,UAAMA,KAAN;AADoB,SAFxBC,EAEwB,GAFX,CAEW;;AAAA,SAQxBC,iBARwB,GAQJ,MAAM;AACtB,WAAKC,QAAL,CAAc;AAAEF,QAAAA,EAAE,EAAE,KAAKG,KAAL,CAAWH,EAAX,GAAgB;AAAtB,OAAd;AACH,KAVuB;;AAAA,SAYxBI,QAZwB,GAYZC,CAAD,IAAY;AACnB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAiBD,CAAC,CAACE,MAAzB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAiBF,UAAvB;AACA,YAAMG,KAAK,GAAGD,UAAU,CAAC,CAAD,CAAV,CAAcA,UAA5B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KAlBuB;;AAAA,SAoBxBG,SApBwB,GAoBZ,MAAM;AACd,YAAM;AAAEC,QAAAA;AAAF,UAAgB,KAAKd,KAA3B;AACA,YAAMe,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,QAAX,EAAqBC,MAAnC;AACA,aAAOF,KAAK,IAAI,GAAT,gBAAe,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKV,QAAtB;AAAgC,QAAA,OAAO,EAAC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAf,gBAAoF;AAAA;AAAA;AAAA;AAAA,cAA3F;AACH,KAxBuB;;AAAA,SA0BxBa,QA1BwB,GA0BZJ,IAAD,IAAe;AAEtB,YAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,QAAX,EAAqBC,MAAnC;;AACA,UAAIF,KAAK,IAAI,GAAb,EAAkB;AACdJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH;;AACD,aAAOA,KAAK,IAAI,GAAT,GAAeD,IAAf,GAAsB,KAAKK,MAAL,CAAYL,IAAZ,CAA7B;AACH,KAjCuB;;AAAA,SAmCxBK,MAnCwB,GAmCdL,IAAD,IAAkB;AACvB,YAAMK,MAAM,GAAGL,IAAI,CAACM,KAAL,CAAW,CAAX,EAAc,GAAd,CAAf;AACA,aAAQ,GAAED,MAAO,KAAjB;AACH,KAtCuB;;AAAA,SAwCxBE,MAxCwB,GAwCf,MAAM;AACX,aAAO,KAAKR,SAAL,EAAP;AACH,KA1CuB;;AAEpB,SAAKT,KAAL,GAAa;AACTc,MAAAA,QAAQ,EAAE,KAAKlB,KAAL,CAAWc,IADZ;AAETb,MAAAA,EAAE,EAAE;AAFK,KAAb;AAIH;;AAV8C;;AAiDnD,eAAeH,YAAf","sourcesContent":["import { Component } from \"react\"\nimport { Button } from 'react-bootstrap'\n\n\ninterface Props {\n    text: string\n}\n\ninterface State {\n    textBody: string\n    id: number\n}\n\nclass HiddenButton extends Component<Props, State> {\n\n    id: number = 0\n\n    constructor(props: any) {\n        super(props)\n        this.state = {\n            textBody: this.props.text,\n            id: 0\n        }\n    }\n\n    componentDidMount = () => {\n        this.setState({ id: this.state.id + 1 })\n    }\n\n    readMore = (e: any) => {\n        // console.log(this.state.textBody)\n        const { parentNode } = e.target\n        const { childNodes } = parentNode\n        const child = childNodes[0].childNodes\n        console.log(child)\n    }\n\n    isDisplay = () => {\n        const { text }: any = this.props\n        const words = text.match(/(\\w+)/g).length\n        return words >= 100 ? <Button onClick={this.readMore} variant=\"dark\" >Read more</Button> : <p></p>\n    }\n\n    textBody = (text: any) => {\n\n        const words = text.match(/(\\w+)/g).length\n        if (words >= 100) {\n            console.log(words)\n        }\n        return words <= 100 ? text : this.slicer(text)\n    }\n\n    slicer = (text: string) => {\n        const slicer = text.slice(0, 200)\n        return `${slicer}...`\n    }\n\n    render = () => {\n        return this.isDisplay()\n    }\n}\n\nexport default HiddenButton"]},"metadata":{},"sourceType":"module"}